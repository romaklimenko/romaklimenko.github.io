{"version":3,"sources":["webpack://home/./src/components/tagCloud.js","webpack://home/./src/pages/blog/index.js"],"names":["TagCloud","StaticQuery","query","render","data","biggestTagCount","Math","max","allMarkdownRemark","group","map","d","totalCount","fontSize","floor","key","fieldValue","Link","to","itemProp","style","paddingRight","whiteSpace","location","siteTitle","site","siteMetadata","title","posts","nodes","className","post","frontmatter","fields","slug","date"],"mappings":"gKAGe,SAASA,IACtB,OACE,gBAAC,EAAAC,YAAD,CACEC,MAAK,aAULC,OAAQ,SAAAC,GACN,IAAMC,EAAkBC,KAAKC,IAAL,MAAAD,MAAI,OAAQF,EAAKI,kBAAkBC,MAAMC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,gBAI5E,OAAOR,EAAKI,kBAAkBC,MAAMC,KAAI,SAAAC,GACtC,IAAME,EAA4B,IAAjBF,EAAEC,WACjB,GACAN,KAAKQ,MAAMH,EAAEC,WAAaP,EAAf,IANK,IAOlB,OACE,wBAAMU,IAAKJ,EAAEK,YACX,gBAAC,EAAAC,KAAD,CACEC,GAAE,SAAWP,EAAEK,WACfG,SAAS,MACTC,MAAO,CACLC,aAAc,MACdC,WAAY,SACZT,SAAaA,EAAL,MAGTF,EAAEK,YACG,a,8FCItB,UAlCkB,SAAC,GAAwB,IAAD,EAArBZ,EAAqB,EAArBA,KAAMmB,EAAe,EAAfA,SACnBC,GAAY,UAAApB,EAAKqB,KAAKC,oBAAV,eAAwBC,QAAxB,QACZC,EAAQxB,EAAKI,kBAAkBqB,MAErC,OACE,gBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOH,GACjC,gBAAC,IAAD,CAAKG,MAAM,SACX,uBAAKG,UAAU,OACb,uBAAKA,UAAU,YACb,kCACA,yBACE,gBAAC,IAAD,OAEF,mCACA,sBAAIA,UAAU,iBACXF,EAAMlB,KAAI,SAAAqB,GACT,IAAMJ,EAAQI,EAAKC,YAAYL,OAASI,EAAKE,OAAOC,KAEpD,OACE,sBAAInB,IAAKgB,EAAKE,OAAOC,MACnB,6BAAQH,EAAKC,YAAYG,MAD3B,IAEE,gBAAC,EAAAlB,KAAD,CAAMC,GAAIa,EAAKE,OAAOC,KAAMf,SAAS,OACnC,wBAAMA,SAAS,YAAYQ","file":"component---src-pages-blog-index-js-b7fd46043491cbe8ba9f.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\n\nexport default function TagCloud() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          allMarkdownRemark {\n            group(field: frontmatter___tags) {\n              fieldValue\n              totalCount\n            }\n          }\n        }\n      `}\n      render={data => {\n        const biggestTagCount = Math.max(...data.allMarkdownRemark.group.map(d => d.totalCount));\n        const minFontSize = 100;\n        const maxFontSize = 150;\n\n        return data.allMarkdownRemark.group.map(d => {\n          const fontSize = d.totalCount === 1 ?\n            95 :\n            Math.floor(d.totalCount / biggestTagCount * (maxFontSize - minFontSize)) + minFontSize;\n          return (\n            <span key={d.fieldValue}>\n              <Link\n                to={`/tags/${d.fieldValue}`}\n                itemProp=\"url\"\n                style={{\n                  paddingRight: \"5px\",\n                  whiteSpace: \"nowrap\",\n                  fontSize: `${fontSize}%`,\n                }}\n              >\n                {d.fieldValue}\n              </Link>{\" \"}\n            </span>\n          )\n        })\n      }}\n    />\n  )\n}\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../../components/layout\"\nimport SEO from \"../../components/seo\"\nimport TagCloud from \"../../components/tagCloud\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Blog\" />\n      <div className=\"row\">\n        <div className=\"col-md-8\">\n          <h3>Tags</h3>\n          <p>\n            <TagCloud />\n          </p>\n          <h3>Posts</h3>\n          <ol className=\"list-unstyled\">\n            {posts.map(post => {\n              const title = post.frontmatter.title || post.fields.slug\n\n              return (\n                <li key={post.fields.slug}>\n                  <small>{post.frontmatter.date}</small>&nbsp;\n                  <Link to={post.fields.slug} itemProp=\"url\">\n                    <span itemProp=\"headline\">{title}</span>\n                  </Link>\n                </li>\n              )\n            })}\n          </ol>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY-MM-DD\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}