<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Roman Klimenko]]></title><description><![CDATA[Roman Klimenko's home page]]></description><link>https://romaklimenko.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 16 May 2021 10:58:26 GMT</lastBuildDate><item><title><![CDATA[PRAW, The Python Reddit API Wrapper]]></title><description><![CDATA[While Reddit REST API is pretty straightforward, PRAW (The Python Reddit API Wrapper) makes the tasks of retrieving Reddit data even more…]]></description><link>https://romaklimenko.github.io/blog/2021/reddit-praw/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2021/reddit-praw/</guid><pubDate>Sun, 02 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;While &lt;a href=&quot;https://www.reddit.com/dev/api/&quot;&gt;Reddit REST API&lt;/a&gt; is pretty straightforward, PRAW (&lt;a href=&quot;https://praw.readthedocs.io/en/latest/index.html&quot;&gt;The Python Reddit API Wrapper&lt;/a&gt;) makes the tasks of retrieving Reddit data even more effortless.&lt;/p&gt;
&lt;p&gt;Recently I had to go through my subreddits and download all the posted images.
That took less than an hour to read the docs and make what I want.&lt;/p&gt;
&lt;p&gt;The first step is to create a developer application here: &lt;a href=&quot;https://www.reddit.com/prefs/apps&quot;&gt;https://www.reddit.com/prefs/apps&lt;/a&gt;:
&lt;img src=&quot;create.png&quot; class=&quot;img-fluid&quot; style=&quot;box-shadow: 0 1px 3px rgba(34, 25, 25, 0.4);&quot; /&gt;
The redirect URL can be any public URL, but this field can&apos;t be empty, so I just typed the Reddit website there.&lt;/p&gt;
&lt;p&gt;When you have created the application, it will look like this one:
&lt;img src=&quot;app.png&quot; class=&quot;img-fluid&quot; style=&quot;box-shadow: 0 1px 3px rgba(34, 25, 25, 0.4);&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You would need a &lt;code class=&quot;language-text&quot;&gt;client_id&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;client_secret&lt;/code&gt;. The first one appears right under the words &quot;personal use script&quot; on the screenshot. The &lt;code class=&quot;language-text&quot;&gt;client_secret&lt;/code&gt; is, obviously, the &quot;secret.&quot;&lt;/p&gt;
&lt;p&gt;When the preparations are done, and PRAW is installed (&lt;code class=&quot;language-text&quot;&gt;pip3 install praw&lt;/code&gt;), the rest is up to what you want. For example, to initialize a PRAW client:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; praw

reddit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; praw&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Reddit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    client_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;CLIENT_ID&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    client_secret&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;CLIENT_SECRET&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    username&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;USERNAME&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    password&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;PASSWORD&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    user_agent&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;reddit-feed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, it will not work if you have enabled two-factor authentication for your account. There is &lt;a href=&quot;https://praw.readthedocs.io/en/latest/getting_started/authentication.html#oauth&quot;&gt;the right way&lt;/a&gt; to handle it, but in my case, I just use my backup account.&lt;/p&gt;
&lt;p&gt;Then to get a &lt;a href=&quot;https://praw.readthedocs.io/en/latest/code_overview/models/subreddit.html&quot;&gt;subreddit&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;subreddit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reddit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;subreddit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pics&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And all &lt;a href=&quot;https://praw.readthedocs.io/en/latest/code_overview/models/submission.html&quot;&gt;submissions&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;for submission in subreddit.top(time_filter=&amp;#39;week&amp;#39;):
	pass # TODO: your code goes here&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To save an image, you have to use the &lt;code class=&quot;language-text&quot;&gt;submission.url&lt;/code&gt;. And when you construct the path to save the file, you can save it with the &lt;code class=&quot;language-text&quot;&gt;requests&lt;/code&gt; module (&lt;code class=&quot;language-text&quot;&gt;pip3 install requests&lt;/code&gt;) like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; requests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;submission&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file_path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;wb&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;write&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Render a right-to-left tree with D3.js]]></title><description><![CDATA[Recently I needed to render a right-to-left D3.js tree to visualize the mapping of multiple entities into one (as opposed to branching of…]]></description><link>https://romaklimenko.github.io/blog/2021/right-to-left-d3-tree/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2021/right-to-left-d3-tree/</guid><pubDate>Fri, 30 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;img src=&quot;left-to-rigth-tree.png&quot; style=&quot;max-height: 450px;&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Recently I needed to render a right-to-left D3.js tree to visualize the mapping of multiple entities into one (as opposed to branching of one entity into many).
The right way to do it is to tweak the &lt;a href=&quot;https://github.com/d3/d3-shape#linkHorizontal&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;d3.linkHorizontal()&lt;/code&gt;&lt;/a&gt; so instead of:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; d3&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;linkHorizontal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it could be like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; d3&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;linkHorizontal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that&apos;s not all that you have to do. The Internet is full of unanswered StackOverflow questions and &lt;a href=&quot;https://bl.ocks.org/mbostock/3184089&quot;&gt;obsolete examples&lt;/a&gt;. My approach is probably not the best one, but it works for me: I let D3.js to render a normal left-to-right tree, then flip it horizontally via &lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt;, flip all the texts back with another &lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt;, and finally invert the text anchors, so the labels are where they have to be:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  svg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;scale(-1, 1)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  svg
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;scale(-1, 1)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text-anchor&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;depth &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;start&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; d3&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text-anchor&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;start&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the result:&lt;/p&gt;
&lt;img src=&quot;right-to-left-tree.png&quot; style=&quot;max-height: 450px;&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;&lt;a href=&quot;https://observablehq.com/@romaklimenko/right-to-left-tidy-tree&quot;&gt;https://observablehq.com/@romaklimenko/right-to-left-tidy-tree&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[List Azure resource locations]]></title><description><![CDATA[If you want to create a new resource group from Azure CLI. You can easily do it like that: But what if you would like to create a resource…]]></description><link>https://romaklimenko.github.io/blog/2021/list-locations/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2021/list-locations/</guid><pubDate>Sun, 18 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;img src=&quot;azure.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;small&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/global-infrastructure/geographies/&quot; target=&quot;_blank&quot;&gt;
    https://azure.microsoft.com/en-us/global-infrastructure/geographies/&lt;/a&gt;&lt;/small&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;If you want to &lt;a href=&quot;https://docs.microsoft.com/en-us/cli/azure/group?view=azure-cli-latest#az_group_create&quot;&gt;create a new resource group&lt;/a&gt; from Azure CLI. You can easily do it like that:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;az group create --location westus -name MyResourceGroup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what if you would like to create a resource group in Europe or Asia? What should you type instead of &lt;code class=&quot;language-text&quot;&gt;westus&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;To have a complete list of available locations, you can run:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;az account list-locations&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will get a long output like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;displayName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Brazil Southeast&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/subscriptions/.../locations/brazilsoutheast&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;metadata&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;geographyGroup&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;South America&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;latitude&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-22.90278&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;longitude&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-43.2075&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;pairedRegion&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/subscriptions/.../locations/brazilsouth&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;brazilsouth&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;subscriptionId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;physicalLocation&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Rio&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;regionCategory&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Other&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;regionType&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Physical&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;brazilsoutheast&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;regionalDisplayName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;(South America) Brazil Southeast&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;subscriptionId&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This list is hard to read and what you need from it is the &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; property of each location.
To get only names, use the &lt;code class=&quot;language-text&quot;&gt;--query&lt;/code&gt; parameter:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;az account list-locations --query &lt;span class=&quot;token string&quot;&gt;&quot;[*].name&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is way readable now:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;eastus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;eastus2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;southcentralus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;westus2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;australiaeast&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;norwaywest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;switzerlandwest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;ukwest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;uaecentral&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;brazilsoutheast&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But still, it would be nice to sort the list alphabetically:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;az account list-locations --query &lt;span class=&quot;token string&quot;&gt;&quot;[*].name&quot;&lt;/span&gt; --out tsv &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;asia
asiapacific
australia
australiacentral
australiacentral2
australiaeast
australiasoutheast
brazil
brazilsouth
brazilsoutheast
canada
canadacentral
canadaeast
centralindia
centralus
centraluseuap
centralusstage
eastasia
eastasiastage
eastus
eastus2
eastus2euap
eastus2stage
eastusstage
europe
francecentral
francesouth
germanynorth
germanywestcentral
global
india
japan
japaneast
japanwest
jioindiawest
koreacentral
koreasouth
northcentralus
northcentralusstage
northeurope
norwayeast
norwaywest
southafricanorth
southafricawest
southcentralus
southcentralusstage
southeastasia
southeastasiastage
southindia
switzerlandnorth
switzerlandwest
uaecentral
uaenorth
uk
uksouth
ukwest
unitedstates
westcentralus
westeurope
westindia
westus
westus2
westus2stage
westus3
westusstage&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are in PowerShell, you could filter the output like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;az account list&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;locations &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;query &lt;span class=&quot;token string&quot;&gt;&quot;[*].name&quot;&lt;/span&gt; `
    &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ConvertFrom-Json&lt;/span&gt; `
    &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt; `
    &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; where &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-like&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*europe*&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;europe
northeurope
westeurope&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Hasta la vista, Sitecore!]]></title><description><![CDATA[After eleven years in Sitecore, it's time to move on and say hasta la vista. During the last weeks, I was deeply moved to receive dozens of…]]></description><link>https://romaklimenko.github.io/blog/2021/hasta-la-vista/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2021/hasta-la-vista/</guid><pubDate>Fri, 26 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;After eleven years in Sitecore, it&apos;s time to move on and say &lt;a href=&quot;/2015/02/05/skynet.html&quot;&gt;hasta la vista&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During the last weeks, I was deeply moved to receive dozens of warm wishes from my colleagues. A few days ago, I received an electronic postcard with best wishes from more than fifty sitecorians with whom I had the pleasure to work on various projects.&lt;/p&gt;
&lt;p&gt;My &lt;a href=&quot;https://doc.sitecore.com/users/exm/100/email-experience-manager/en/introducing-the-email-experience-manager.html&quot;&gt;lovely team&lt;/a&gt; presented me with a lot of cute things that I will keep to remember the time we have spent together. This funny mousepad is among these things:&lt;/p&gt;
&lt;img src=&quot;fine.jpeg&quot; class=&quot;img-fluid&quot; /&gt;
&lt;hr&gt;
&lt;p&gt;It&apos;s hard to find the right words to express my gratitude to my Sitecore co-workers. I sincerely appreciate the time we were working together.&lt;/p&gt;
&lt;p&gt;Hasta la vista, fellow sitecorians! Thank you from the bottom of my heart! ❤️&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sitecore MVPs by year and by country]]></title><description><![CDATA[Spreadsheet, source.]]></description><link>https://romaklimenko.github.io/blog/2021/sitecore-mvp/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2021/sitecore-mvp/</guid><pubDate>Wed, 17 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;img src=&quot;sitecore-mvp.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1x4aZEHUEtekhreZOPvrgrADkvF0JdRp41nsdhiPU9rk/edit?usp=sharing&quot;&gt;Spreadsheet&lt;/a&gt;, &lt;a href=&quot;https://mvp.sitecore.com&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Bell's Theorem]]></title><description><![CDATA[This page is a mental experiment I have made over a weekend. I am not pretending to be an expert in quantum physics, and my interpretation…]]></description><link>https://romaklimenko.github.io/blog/2021/bell/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2021/bell/</guid><pubDate>Mon, 15 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://observablehq.com/@romaklimenko/yet-another-naive-attempt-to-grokk-bells-theorem&quot;&gt;This page&lt;/a&gt; is a mental experiment I have made over a weekend. I am not pretending to be an expert in quantum physics, and my interpretation is most probably not precise.&lt;/p&gt;
&lt;p&gt;Nevertheless, it may help to build an intuition about these things.&lt;/p&gt;
&lt;p&gt;Let&apos;s imagine a world where 2-dimensional particles exist. Each particle is a vector that points to a random direction from 0 up to 2π radians (i.e., from 0˚ up to 360˚).&lt;/p&gt;
&lt;p&gt;Each particle has only one property - angle, but according to this world&apos;s rules, the inhabitants can&apos;t measure a particle&apos;s angle directly - they can only use two-dimensional detectors.&lt;/p&gt;
&lt;p&gt;A detector is nothing more than another vector that an inhabitant can rotate to any angle. We provide the inhabitants a detect function that accepts a detector and a particle and returns either +1 or -1.&lt;/p&gt;
&lt;p&gt;Here is an example of a very classical detect function. It will return one (+1) if the angle between the particle and the detector is less than 90˚. In other words if the cosine of this angle is greater than zero (0). Otherwise, the function will return minus one (-1).&lt;/p&gt;
&lt;p&gt;Now, let&apos;s experiment: for each angle from 0˚ to 360˚, let&apos;s take two detectors that have this angle between each other. Then, let&apos;s prepare two particles, which angles are random except that each particle&apos;s angle is always opposite to another. Let&apos;s do this experiment, say, 1000 times per each angle from 0˚ to 360˚, and chart how many times our detectors will return the same results:
&lt;img src=&quot;b.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We shall not be surprised by what we see. Indeed, if one particle is 0˚, then another (the opposite) must be 180˚. If our detectors are less than 90˚ between each other, they always show the opposite results. If the detectors are 180˚ to each other, they both show the same results. The rest of the cases falls between these two.&lt;/p&gt;
&lt;p&gt;A significantly different situation would be if we did the same experiment with a semi-quantum detect function. It will not deterministically return +1 or -1, but instead, it will return either +1 or -1 with a probability of cosine of the angle between the two detectors:
&lt;img src=&quot;r.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now, the picture is very different. But here, we still have two deterministic particles that are not connected when they are detected. What John Bell proves in his theorem is that a pair of entangled particles is detected like these particles are connected even if they are far away from each other. To emulate this, we introduce a quantum detect function. It does not only return -1 or +1 with a probability of cosine between the particle and the detector, but it changes the particle&apos;s angle to the detector&apos;s angle if the result is +1 or to the opposite angle if the result is -1.&lt;/p&gt;
&lt;p&gt;We will emulate the entanglement by measuring the same particle and inverting the results of the second detector:
&lt;img src=&quot;g.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s plot all three detect functions on the same chart to see the difference:
&lt;img src=&quot;rbg.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Please, fork &lt;a href=&quot;https://observablehq.com/@romaklimenko/yet-another-naive-attempt-to-grokk-bells-theorem&quot;&gt;this notebook&lt;/a&gt; and fix it if you see that my explanation is not precise or is entirely wrong.&lt;/p&gt;
&lt;p&gt;Thank you!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Social activity visualization (summary)]]></title><description><![CDATA[What do software developers on their free time? Not sure about the others, but I love to code. There's not always a chance to practice some…]]></description><link>https://romaklimenko.github.io/blog/2021/d3/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2021/d3/</guid><pubDate>Sun, 14 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;img src=&quot;home.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;What do software developers on their free time? Not sure about the others, but I love to code. There&apos;s not always a chance to practice some of the development aspects at work. Pet projects help me to get the skills that I can later use at work.&lt;/p&gt;
&lt;p&gt;One such pet project was a social visualization web app that I initially wrote on Express.js + jQuery + d3.js and hosted on Heroku. About a year ago, I needed to grasp the concepts of Angular. We use it in our team, and I could perform any tasks, but I wanted to develop an Angular app from the ground to practice all its concepts even if we are not using some of them on our current project. At this time, I have decided to rewrite my good old pet project from jQuery to Angular.&lt;/p&gt;
&lt;p&gt;The full implementation didn&apos;t take too much: a few evenings to rewrite the old stuff, and then I added some new ideas from time to time.&lt;/p&gt;
&lt;p&gt;In short, the app now is a static website hosted on GitHub Pages with Express.js API running in a Google Cloud Function. I use Google Cloud Storage to cache JSON data for responses.&lt;/p&gt;
&lt;p&gt;From its start, the app has served more than 5000 unique visitors. Recently, I had to require visitors to authenticate. Since then (two last months), about 300 users have logged in to the app. About two-thirds of them use it almost daily.&lt;/p&gt;
&lt;p&gt;Static web hosting, cloud functions, and cloud storage allow me to run the app almost free. Usually, it&apos;s no more than two danish kroner per month (33 USD cents).&lt;/p&gt;
&lt;p&gt;The app is almost self-sustainable and doesn&apos;t require my attention, but sometimes things may go wrong. For example, last week, all the user passwords on d3.ru were dropped, and the service account that my app used to send requests to d3.ru API was blocked.&lt;/p&gt;
&lt;p&gt;Worth to mention, that the app doesn&apos;t keep any user passwords. The users enter their d3.ru logins and passwords on a statically hosted web page that sends this information to d3.ru API only. Then the page only keeps the session key in localStorage and never sends it anywhere except d3.ru API.&lt;/p&gt;
&lt;p&gt;Anyway, the app no longer has any of my priorities, and I am considering either shut it down or let it run as soon as it can without my involvement. This post is to have a summary of what this app was doing. Let it be a reference in a case if the app will shut down.&lt;/p&gt;
&lt;p&gt;My main goal was to visualize the social activities that help users understand when they spend too much time on the website. For example, here are all user&apos;s posts and comments by day and time:&lt;/p&gt;
&lt;img src=&quot;activity.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;In the following chart, we use the same data to deduct when the user had slept. The gray lines represent the user&apos;s inactivity for more than 8 hours. The orange lines are when the user was inactive for less than 8 hours:&lt;/p&gt;
&lt;img src=&quot;sleep.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Now, let&apos;s look from another angle: the columns are the numbers of comments and posts per day. The red ones are weekends. The red curve represents a moving average of the daily number of posts and comments over the last 30 days:&lt;/p&gt;
&lt;img src=&quot;daily-activity.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;The following chart is the user&apos;s karma, a global metric set over the whole d3.ru. Each d3.ru user can give another one -2, -1, +1 or +2 karma. You may see on the chart that despite the user&apos;s karma was generally growing over time, there were significant drops, which shows how easily one can lose karma when writes or does something against the majority:&lt;/p&gt;
&lt;img src=&quot;karma.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;On the other hand, the cumulative rating for posts and comments for the same user doesn&apos;t show such drops, which shows, in this particular case, that the sets of karma and posts+comments voters do not fully intercept:&lt;/p&gt;
&lt;img src=&quot;rating.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Users with the highest rating in a community have the highest vote weight when they vote for posts and comments. This concept leads to some interesting effects when a post may have a positive rating (black line) despite there are more downvoters than upvoters (gray line):&lt;/p&gt;
&lt;img src=&quot;post.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Finally, the app collects historical data about the numbers of community subscribers. On the chart below, you may see how the number of subscribers has dropped after some drama inside the community and how much time it took to gain the same number of subscribers:&lt;/p&gt;
&lt;img src=&quot;subscribers.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;So it goes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Den Danske Ordbog]]></title><description><![CDATA[It was nice to have a microchat with the DDO account on Twitter today: DDO the official Danish dictionary. Here is the link they mentioned…]]></description><link>https://romaklimenko.github.io/blog/2021/ddo/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2021/ddo/</guid><pubDate>Thu, 11 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It was nice to have a &lt;a href=&quot;https://twitter.com/DenDanskeOrdbog/status/1359820623271366656&quot;&gt;microchat&lt;/a&gt; with the DDO account on Twitter today:&lt;/p&gt;
&lt;img src=&quot;ddo.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;DDO the official Danish dictionary. Here is the link they mentioned: &lt;a href=&quot;https://korpus.dsl.dk/resources/index.html&quot;&gt;https://korpus.dsl.dk/resources/index.html&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Vogel des Jahres 2021]]></title><description><![CDATA[I was pleased to know that some of my photos were selected for the German website Vogel des Jahres 2021:]]></description><link>https://romaklimenko.github.io/blog/2021/vogel/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2021/vogel/</guid><pubDate>Wed, 27 Jan 2021 00:00:00 GMT</pubDate><content:encoded>&lt;img src=&quot;vogel.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;I was pleased to know that some of my photos were selected for the German website &lt;a href=&quot;https://www.vogeldesjahres.de/index.html&quot;&gt;Vogel des Jahres 2021&lt;/a&gt;:&lt;/p&gt;
&lt;img src=&quot;swallow.jpg&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[A Cow!]]></title><description><![CDATA[Yet another (#1, #2) painting based on one of my photos!
Well done, @ankkrylova, thank you for such a stylish cow!]]></description><link>https://romaklimenko.github.io/blog/2021/cow/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2021/cow/</guid><pubDate>Sun, 10 Jan 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Yet another (&lt;a href=&quot;/2016/10/03/drawing.html&quot;&gt;#1&lt;/a&gt;, &lt;a href=&quot;/2018/10/27/painting.html&quot;&gt;#2&lt;/a&gt;) painting based on one of my photos!
Well done, &lt;a href=&quot;https://www.instagram.com/ankkrylova/&quot;&gt;@ankkrylova&lt;/a&gt;, thank you for such a stylish cow!&lt;/p&gt;
&lt;img src=&quot;cow-1.jpg&quot; class=&quot;img-fluid&quot; /&gt;
&lt;br&gt;
&lt;br&gt;
&lt;img src=&quot;cow-2.jpg&quot; class=&quot;img-fluid&quot; /&gt;
&lt;br&gt;
&lt;p style=&quot;margin-bottom:5px;&quot;&gt;&lt;a href=&quot;https://www.instagram.com/p/CHDBzt5hwQq/&quot;&gt;Original&lt;/a&gt;:&lt;/p&gt;
&lt;img src=&quot;cow-0.jpg&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[SKI boolean logic]]></title><description><![CDATA[Combinators are not an easy concept to grok. As a programmer, I find it helpful to write some code that proves the concept I want to…]]></description><link>https://romaklimenko.github.io/blog/2020/ski/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2020/ski/</guid><pubDate>Wed, 01 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;img src=&quot;ski.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Combinators are not an easy concept to grok. As a programmer, I find it helpful to write some code that proves the concept I want to understand. Learning by doing it is!&lt;/p&gt;
&lt;p&gt;In this post, I implement the three basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Combinatory_logic&quot;&gt;combinators&lt;/a&gt; of the &lt;a href=&quot;https://en.wikipedia.org/wiki/SKI_combinator_calculus&quot;&gt;SKI combinator calculus&lt;/a&gt;. Then, I add boolean logic operators and test &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan%27s_laws&quot;&gt;De Morgan&apos;s laws&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don&apos;t pretend to be an expert. Consider this post just as notes that I wrote to grab the concept. Hopefully, these notes will help those who try to do the same thing.&lt;/p&gt;
&lt;h4&gt;Combinator Birds&lt;/h4&gt;
&lt;p&gt;In his famous book &lt;a href=&quot;https://en.wikipedia.org/wiki/To_Mock_a_Mockingbird&quot;&gt;&quot;To Mock a Mockingbird and Other Logic Puzzles: Including an Amazing Adventure in Combinatory Logic&quot;&lt;/a&gt;, Raymond Smullyan uses birds as a metaphor of combinators:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A certain enchanted forest is inhabited by talking birds.
Given any birds A and B, if you call out the name of B to A,
then A will respond by calling out the name of some bird to you;
this bird we designate by AB.
Thus AB is the bird named by A upon hearing the name of B.
Instead of constantly using the cumbersome phrase
&quot;A&apos;s response to hearing the name of B,&quot; we shall more simply say:
&quot;A&apos;s response to B.&quot; Thus AB is A&apos;s response to B.
In general, A&apos;s response to B is not necessarily
the same as B&apos;s response to A-in symbols,
AB is not necessarily the same bird as BA.
Also, given three birds A, B, and C, the bird A(BC)
is not necessarily the same as the bird (AB)C.
The bird A(BC) is A&apos;s response to the bird BC,
whereas the bird (AB)C is the response
of the bird AB to the bird C.
The use of parentheses is thus necessary to avoid ambiguity;
if I just wrote ABC, you could not possibly know
whether I meant the bird A(BC) or the bird (AB)C.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Going chapter-by-chapter through the book is out of the scope of this article,
but hopefully, I will partially do that in the next posts.&lt;/p&gt;
&lt;p&gt;Anyway, some birds take birds in and return birds out - what a beautiful analogy to functions!
The combinators are functions, and we give them bird names.&lt;/p&gt;
&lt;p&gt;Now, meet probably the simplest combinator ever:&lt;/p&gt;
&lt;h4&gt;Idiot &lt;small&gt;λa.a&lt;/small&gt;&lt;/h4&gt;
&lt;p&gt;Someone call it &lt;em&gt;Identity&lt;/em&gt; bird. Despite its simplicity, you can see later that they can be useful. Here is how we define an Idiot in TypeScript:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Idiot&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Idiot&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What it does is it takes a thing and returns the same thing without changing is:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Idiot&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;whatever&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Ix = x&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Kestrel &lt;small&gt;λab.a&lt;/small&gt;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Kestrel&lt;/em&gt; is also known as &lt;em&gt;constant&lt;/em&gt; or &lt;em&gt;TRUE&lt;/em&gt;. It merely takes a value and then returns that value whatever you give it after:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Kestrel&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T0&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Kestrel&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Kestrel&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Kxy = x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; actual &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;actual&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Starling &lt;small&gt;λabc.ac(bc)&lt;/small&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;em&gt;Starling&lt;/em&gt; (or a &lt;em&gt;substitution&lt;/em&gt; operator) is more complicated:
&quot;It takes three arguments and then returns the first argument applied to the third, which is then applied to the result of the second argument applied to the third&quot;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Starling&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TC&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Starling&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Starling&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Sxyz = xz(yz)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; _ &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; xz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;z&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; yz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;z&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; actual &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;z&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;actual&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;xz&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yz&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;actual&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Ix = SSKKx = SK(KK)x = x&lt;/h4&gt;
&lt;p&gt;We can build any combinator (including I) just with K and S:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Idiot&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ix = SSKKx = x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ix = SK(KK)x = x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; kk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;kk&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;TRUE = K&lt;/h4&gt;
&lt;p&gt;Say, we have an ordered pair of two values: true and false. As Kerstel always returns the first value, we can call it TRUE:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;TRUE = K&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ktf = (TRUE)tf = t&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; actual &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;actual&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;actual&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;FALSE = SK = KI&lt;/h4&gt;
&lt;p&gt;In the same manner, we can build a combinator that will always return FALSE:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;FALSE = SK&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SKxy = y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;KItf = (FALSE)tf = f&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; actual &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;actual&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;actual&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice, how in the second test, we use KI instead of SK.
Indeed, I is not necessary but can be used as syntactic sugar.&lt;/p&gt;
&lt;h4&gt;NOT = (SK)(K)&lt;/h4&gt;
&lt;p&gt;Now things are getting complicated. We can&apos;t trust our intuition and write tests.
Here is NOT:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NOT = (SK)(K)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NOT = (SK)(K)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NOT(TRUE) = FALSE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NOT(FALSE) = TRUE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;TRUE(FALSE)(TRUE) = FALSE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;FALSE(FALSE)(TRUE) = TRUE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The definition of NOT is not precisely the same, as in Wikipedia.
Please check out the &lt;a href=&quot;https://stackoverflow.com/a/60948367/643180&quot;&gt;answer&lt;/a&gt; to my question on Stackoverflow to see why.&lt;/p&gt;
&lt;h4&gt;OR = TRUE&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;OR = T = K&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(T)OR(T) = T(T)(T) = T&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(T)OR(F) = T(T)(F) = T&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(F)OR(T) = F(T)(T) = T&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(F)OR(F) = F(T)(F) = F&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;AND = FALSE&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AND = F = SK&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(T)(T)AND = T(T)(F) = T&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(T)(F)AND = T(F)(F) = F&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(F)(T)AND = F(T)(F) = F&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(F)(F)AND = F(F)(F) = F&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;De Morgan&apos;s laws&lt;/h4&gt;
&lt;p&gt;Now, when we have a boolean logic system, let&apos;s check &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan%27s_laws&quot;&gt;De Morgan&apos;s laws&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;De Morgan&apos;s Laws&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;AND&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NOT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;¬(a ∨ b) ⇔ (¬a) ∧ (¬b)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;¬(a ∧ b) ⇔ (¬a) ∨ (¬b)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The repo is &lt;a href=&quot;https://github.com/romaklimenko/mockingbird&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;br&gt;</content:encoded></item><item><title><![CDATA[A spherical gorilla in a vacuum]]></title><description><![CDATA[If you are a software developer, you most probably know Joe's Armstrong quote about object-oriented programming: "The problem with object…]]></description><link>https://romaklimenko.github.io/blog/2020/banana/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2020/banana/</guid><pubDate>Wed, 11 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;If you are a software developer, you most probably know Joe&apos;s Armstrong quote about object-oriented programming:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;The problem with object-oriented languages is they&apos;ve got all this implicit environment that they carry around with them. You wanted a banana but what you got were a gorilla holding the banana and the entire jungle.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Four years ago, I came across, yet another article where the author used this quote as one of the arguments against OOP. &quot;&lt;a href=&quot;https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53&quot;&gt;Goodbye, Object-Oriented Programming&lt;/a&gt;&quot; - was the title of the article.&lt;/p&gt;
&lt;p&gt;I answered this with a &lt;a href=&quot;https://medium.com/@romaklimenko/this-is-definitely-a-phrase-of-the-year-71d24b1383ee&quot;&gt;comment&lt;/a&gt;:&lt;/p&gt;
&lt;img src=&quot;medium.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Despite obvious grammar mistakes, the comment got more than a thousand claps so far.&lt;/p&gt;
&lt;p&gt;It doesn&apos;t seem like the author got my point, and since I also can&apos;t entirely agree with the author&apos;s judgment about OOP, I&apos;d like to explain my opinion about this.&lt;/p&gt;
&lt;p&gt;As a software developer, I often feel the pain of solving the banana-with-gorilla-with-jungle problem. That&apos;s true.
At the same time, &lt;em&gt;this is our job to implement simple interfaces on top of complicated things&lt;/em&gt;. &lt;em&gt;We deal with the complexity to produce simplicity, and this is not a simple task&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Object-oriented programming gives us great tools: encapsulation, inheritance, and polymorphism. But we have many other useful tools, and we decide which tool to use and when.&lt;/p&gt;
&lt;p&gt;In an example, even in an &quot;object-oriented&quot; language, we can care about side-effects and implement pure functions where there is no need for a state. The decision about what to use is our responsibility, and this decision has to be a conscious choice, not just &quot;I was told there would be benefits.&quot; Either we choose OOP, FP, or whatever.&lt;/p&gt;
&lt;p&gt;Regarding the gorilla holding a banana in the entire jungle, I am not sure about the banana, but gorillas are complex creatures, and if you really want a gorilla, not an oversimplified gorilla in a vacuum, you may need to put it into the jungle with the air, water, trees, and bananas.&lt;/p&gt;
&lt;p&gt;May &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt; be with you!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sitecorosaur]]></title><description><![CDATA[I am very grateful to my colleagues for such a cool hoodie. Now I’m a real sitecorosaur! 🦕 My first working day in Sitecore was ten years…]]></description><link>https://romaklimenko.github.io/blog/2020/sitecorosaur/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2020/sitecorosaur/</guid><pubDate>Fri, 07 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;img src=&quot;sitecorosaur.jpg&quot; /&gt;
&lt;p&gt;I am very grateful to my colleagues for such a cool hoodie. Now I’m a real sitecorosaur! 🦕&lt;/p&gt;
&lt;p&gt;My first working day in Sitecore was ten years ago, on 28 January 2010.&lt;/p&gt;
&lt;p&gt;During the decade, I was happy to work with a lot of talented and exciting colleagues on many inspiring and challenging projects.&lt;/p&gt;
&lt;p&gt;Here are just some of the projects I can remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support of the company&apos;s website&lt;/li&gt;
&lt;li&gt;Nicam demo website&lt;/li&gt;
&lt;li&gt;Jetstream demo website&lt;/li&gt;
&lt;li&gt;Sitecore® Social Connected&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sitecore.com/products/sitecore-experience-platform&quot;&gt;Sitecore® Experience Platform™&lt;/a&gt; 6, 7, 8, 9&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sitecore.com/solutions/testing-optimization&quot;&gt;Testing and Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.sitecore.com/users/90/sitecore-experience-platform/en/path-analyzer.html&quot;&gt;Path Analyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.sitecore.com/developers/90/sitecore-experience-platform/en/xconnect-218634.html&quot;&gt;xConnect&lt;/a&gt; (the core libs, OData service, client, and providers: SQL and MongoDB)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sitecore.com/products/content-hub&quot;&gt;Sitecore® Content Hub™&lt;/a&gt; connector&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sitecore.com/products/sitecore-experience-platform/cross-channel-delivery/exm&quot;&gt;Sitecore® Email Experience Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That was a great decade!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sitecore Connect™ for Sitecore CMP 2.0.0]]></title><description><![CDATA[Sitecore Connect™ for Sitecore CMP version 2.0.0 was released this week. It is a module that syncs content created in the Sitecore Content…]]></description><link>https://romaklimenko.github.io/blog/2020/cmp-connect/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2020/cmp-connect/</guid><pubDate>Tue, 21 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://dev.sitecore.net/Downloads/Sitecore_Connect_for_Sitecore_CMP/20/Sitecore_Connect_for_Sitecore_CMP_200.aspx&quot;&gt;Sitecore Connect™ for Sitecore CMP version 2.0.0&lt;/a&gt; was released this week. It is a module that syncs content created in the Sitecore Content Hub to Sitecore XP.&lt;/p&gt;
&lt;p&gt;The module has excellent documentation. However, in this post, I&apos;d like to shed some light on the technical aspects of the module.&lt;/p&gt;
&lt;p&gt;In Sitecore XP, the building blocks are called items. In Content Hub, there are entities. The entities have fields and relations.&lt;/p&gt;
&lt;p&gt;Say, we have created a blog post in English (&lt;code class=&quot;language-text&quot;&gt;en-US&lt;/code&gt;) in Content Hub. In this case, Content Hub, we have an entity with properties like &lt;code class=&quot;language-text&quot;&gt;Title&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Body&lt;/code&gt;, etc. A relation named &lt;code class=&quot;language-text&quot;&gt;ContentTypeToContent&lt;/code&gt; from a &lt;code class=&quot;language-text&quot;&gt;Blog&lt;/code&gt; entity to our entity makes our entity a blog post.&lt;/p&gt;
&lt;p&gt;And a relation named &lt;code class=&quot;language-text&quot;&gt;LocalizationToContent&lt;/code&gt; from &lt;code class=&quot;language-text&quot;&gt;en-US&lt;/code&gt; entity to our entity tells us that our blog post is in American English.&lt;/p&gt;
&lt;p&gt;Now, if we localize our blog post, say, to &lt;code class=&quot;language-text&quot;&gt;nl-BE&lt;/code&gt;, Content Hub creates another blog post entity and links it via the &lt;code class=&quot;language-text&quot;&gt;LocalizationToContent&lt;/code&gt; relation to &lt;code class=&quot;language-text&quot;&gt;nl-BE&lt;/code&gt; language entity. There&apos;s also a &lt;code class=&quot;language-text&quot;&gt;ContentToContentLocalization&lt;/code&gt; relation from our English blog post to a localized Belgian one.&lt;/p&gt;
&lt;img src=&quot;entity.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Now, let&apos;s see how Sitecore Connect™ for Sitecore CMP 2.0.0 pulls the entities to Sitecore XP items:&lt;/p&gt;
&lt;p&gt;When an entity is published, a Content Hub trigger executes an action that pushes a message to a topic (&lt;code class=&quot;language-text&quot;&gt;hub_out&lt;/code&gt;) in Azure Service bus. The message contains the &lt;code class=&quot;language-text&quot;&gt;entity_id&lt;/code&gt;, and other systems can subscribe to the topic to know about the new changes.&lt;/p&gt;
&lt;p&gt;On the Sitecore XP side (CM), a subscription client listens to the new messages in the &lt;code class=&quot;language-text&quot;&gt;hub_out&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then a new message appears, the &lt;code class=&quot;language-text&quot;&gt;cmp.importEntity&lt;/code&gt; pipeline starts.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;cmp.importEntity&lt;/code&gt; pipeline runs three following processors:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;FetchEntity&lt;/code&gt; processor:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gets the &lt;code class=&quot;language-text&quot;&gt;entity_id&lt;/code&gt; from the Service Bus message.&lt;/li&gt;
&lt;li&gt;Gets the entity from Content Hub.&lt;/li&gt;
&lt;li&gt;Resolves the content language by getting the &lt;code class=&quot;language-text&quot;&gt;LocalizationToContent&lt;/code&gt; relation.&lt;/li&gt;
&lt;li&gt;Resolves the localization parent (if it exists) by getting the &lt;code class=&quot;language-text&quot;&gt;ContentToContentLocalization&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;EnsureItem&lt;/code&gt; processor:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tries to get an item that corresponds to the entity.&lt;/li&gt;
&lt;li&gt;It searches for an item in a configured Items Bucket where the &lt;code class=&quot;language-text&quot;&gt;Entity Identifier&lt;/code&gt; field is equal to the identifier of the entity (if there is no &lt;code class=&quot;language-text&quot;&gt;ContentToContentLocalization&lt;/code&gt; parent entity) or equal to the &lt;code class=&quot;language-text&quot;&gt;ContentToContentLocalization&lt;/code&gt; parent entity.&lt;/li&gt;
&lt;li&gt;Sets the &lt;code class=&quot;language-text&quot;&gt;Entity Identifier&lt;/code&gt; field of the new item.&lt;/li&gt;
&lt;li&gt;If there&apos;s no such an item, the processor creates a new item in the language from the &lt;code class=&quot;language-text&quot;&gt;LocalizationToContent&lt;/code&gt; relation. Otherwise, it uses the default language setting.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SaveFieldValues&lt;/code&gt; processor:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Saves the item fields that configured for synchronization.&lt;/li&gt;
&lt;li&gt;After the &lt;code class=&quot;language-text&quot;&gt;cmp.importEntity&lt;/code&gt; finishes, the module pushes a message to another topic - &lt;code class=&quot;language-text&quot;&gt;hub_in&lt;/code&gt;. This message contains things like incoming message id, item id, entity id, exception, if any.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Content Hub consumes the message and knows the status of the entity synchronization.&lt;/p&gt;
&lt;img src=&quot;topology.png&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[Communities and ratings]]></title><description><![CDATA[These visualizations are based on data from d3.ru, an online platform based on a rating system that allows users to appraise other…]]></description><link>https://romaklimenko.github.io/blog/2019/ratings/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2019/ratings/</guid><pubDate>Sat, 21 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;These visualizations are based on data from &lt;a href=&quot;https://d3.ru&quot;&gt;d3.ru&lt;/a&gt;, an &lt;a href=&quot;https://en.wikipedia.org/wiki/D3.ru&quot;&gt;online platform&lt;/a&gt; based on a rating system that allows users to appraise other individual users as well as content entries and comments posted by them.&lt;/p&gt;
&lt;p&gt;Let&apos;s take all posts and comments at d3.ru. For the last 18 years, that is 982.111 posts and 16.166.101 comments. The site has started as a common feed of posts, but from 2012, communities were introduced. Let&apos;s see how the total rating of posts and comments is distributed between the communities. The first half of the video is fairly boring, but the second shows how the top-10 communities attracted almost the same amount of rating, as the rest six thousand domains:&lt;/p&gt;
&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem&quot; &gt; &lt;p&gt; &lt;iframe src=&quot;https://www.youtube.com/embed/hHWI8Wr2h6w?start=131&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot;&gt;&lt;/iframe&gt; &lt;/p&gt; &lt;/div&gt;
&lt;p&gt;Another way to look at the same data is a stack plot. The &lt;span style=&quot;background-color:#2678B2;color:white;padding:0 3px 0 3px;font-weight:bold;&quot;&gt;blue&lt;/span&gt; is the &apos;other communities&apos;, and the &lt;span style=&quot;background-color:#BCBC35;color:white;padding:0 3px 0 3px;font-weight:bold;&quot;&gt;old gold&lt;/span&gt; is the rating of the common feed that does not belong to any community. The rest are top communities. We can see how the communities were monopolized around the seven top communities that attract about half of the overall d3.rating:&lt;/p&gt;
&lt;img src=&quot;ratings.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;November 2012 - communities were introduced.&lt;/p&gt;
&lt;p&gt;March 17, 2015 - vote weight was introduced - before that date, all users had vote weight equal to one. After that date – the weight of the user&apos;s vote varies between the communities and depends on the rating of their posts and comments.&lt;/p&gt;
&lt;p&gt;In November 2019, only 7 out of 6317 communities attract 48% of all the rating:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;politota - 14%&lt;/li&gt;
&lt;li&gt;leprosorium - 11%&lt;/li&gt;
&lt;li&gt;gif - 9%&lt;/li&gt;
&lt;li&gt;shapito - 6%&lt;/li&gt;
&lt;li&gt;polka - 3%&lt;/li&gt;
&lt;li&gt;ukraine - 3%&lt;/li&gt;
&lt;li&gt;politics - 1%&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5 of these 7 communities are political and are divided into two opposite camps: &quot;politics&quot; (1%) is kinda opposite to other leaders (26%). And this is only between the leaders. There are also political communities that attract less rating and communities, that are described as non-political, but in fact, are engaged in propaganda.&lt;/p&gt;
&lt;p&gt;In such a situation, propaganda metastases spread to other communities and users feel that if they want to have good karma, vote weights and support from the majority, they have to support (or at least or at least not contradict the majority).&lt;/p&gt;
&lt;p&gt;The minority is downvoted and attacked by the trolls, which creates an illusion that the majority is right.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sitecore Workflow WSIWYG]]></title><description><![CDATA[A WYSIWYG editor for Sitecore Workflow was in my todo-list for a long time. But there are always more important things to do, so I decided…]]></description><link>https://romaklimenko.github.io/blog/2019/workflow/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2019/workflow/</guid><pubDate>Mon, 16 Dec 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A WYSIWYG editor for Sitecore Workflow was in my todo-list for a long time. But there are always more important things to do, so I decided to spend an hour to make a POC how it would look like.&lt;/p&gt;
&lt;p&gt;The implementation does not require any backend coding: just an HTML file, a JavaScript file and a Sitecore item for an Editor.&lt;/p&gt;
&lt;p&gt;First of all, let&apos;s put the HTML file under the website folder (in my case, it&apos;s under &lt;code class=&quot;language-text&quot;&gt;Website/sitecore/client/Applications/Workflow&lt;/code&gt;.
Next, add an Editor item in the Core database:&lt;/p&gt;
&lt;img src=&quot;editor.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Then, in the master database, go to Workflows standard values and add the Editor item that you just created to the Editors field:&lt;/p&gt;
&lt;img src=&quot;editors.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Now, a bit of JavaScript and here we go:&lt;/p&gt;
&lt;img src=&quot;sample workflow.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;img src=&quot;path analyzer maps.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;img src=&quot;sample workflow.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;img src=&quot;experience analytics segment.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;img src=&quot;analytics workflow.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;img src=&quot;analytics testing workflow.png&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[Communities and subscribers]]></title><description><![CDATA[These visualizations are based on data from d3.ru, an online platform based on a rating system that allows users to appraise other…]]></description><link>https://romaklimenko.github.io/blog/2019/communities/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2019/communities/</guid><pubDate>Wed, 02 Oct 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;These visualizations are based on data from &lt;a href=&quot;https://d3.ru&quot;&gt;d3.ru&lt;/a&gt;, an &lt;a href=&quot;https://en.wikipedia.org/wiki/D3.ru&quot;&gt;online platform&lt;/a&gt; based on a rating system that allows users to appraise other individual users as well as content entries and comments posted by them.&lt;/p&gt;
&lt;p&gt;There are about 6225 communities on d3.ru. Let&apos;s sort them by the number of subscribers and visualize:
&lt;img src=&quot;1570035900-62c2b95fa27a6d4f9d4080be3a8ca077.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;small&gt;x - community&apos;s index, y - number of the community&apos;s subscribers&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;The average number of subscribers is 629. Let&apos;s show which communities have more or fewer subscribers than the average:
&lt;img src=&quot;1570036168-9518cef0db7eae929b7bdab20986939b.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Most of the communities are below the average number of subscribers.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;A median number of subscribers is 17:
&lt;img src=&quot;1570036315-5a4d8f93e54bde58644ee1e78e805dcd.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Mode is 1:
&lt;img src=&quot;1570036686-98b3c8571d2726b7f31e980d91df3f68.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s take a closer look at the top 200 (by the number of subscribers) of the communities:
&lt;img src=&quot;1570037102-f1d758647dc58fd7c746949dbc0d3551.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And colorize the clusters:
&lt;img src=&quot;1570037248-b2816ef485f41acadcebdb65d6ef2cb9.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The number of the top 80 domains was artificially increased. Let&apos;s decrease the red ones by 28000 and the orange ones by 2000:
&lt;img src=&quot;1570037724-977f4a487b3774d5fb84b4580c194dea.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Karmapulta]]></title><description><![CDATA[These visualizations are based on data from d3.ru, an online platform based on a rating system that allows users to appraise other…]]></description><link>https://romaklimenko.github.io/blog/2019/karmapulta/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2019/karmapulta/</guid><pubDate>Wed, 28 Aug 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;These visualizations are based on data from &lt;a href=&quot;https://d3.ru&quot;&gt;d3.ru&lt;/a&gt;, an &lt;a href=&quot;https://en.wikipedia.org/wiki/D3.ru&quot;&gt;online platform&lt;/a&gt; based on a rating system that allows users to appraise other individual users as well as content entries and comments posted by them.&lt;/p&gt;
&lt;p&gt;Like reddit.com, d3.ru has a concept of karma. There are also communities with opposite political views which leads to mutual downvotes in each other&apos;s karmas.&lt;/p&gt;
&lt;p&gt;Let&apos;s take a look at how changed karmas of all users on d3.ru:
&lt;img src=&quot;1563357315-84dba4bd43006b017b09e323ca630322.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;small&gt;The red lines ended up with negative karma and the green lines - positive.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;You may notice a green mark around September 2016 - this is where users of one community organized to downvote users from the opposite community. The event was called &lt;em&gt;&quot;karmapulta&quot;&lt;/em&gt; &lt;em&gt;(karma + catapult)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let&apos;s take a look at the downvoted community:
&lt;img src=&quot;1563368232-5e04eab1b5b61d764f18ce45db1a2e52.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;small&gt;As the mark below 0 is green, this shows how users of the downvoted community organized to upvote the downvoted users.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;If we leave only the most affected users who were downvoted and then upvoted during the karmapulta:
&lt;img src=&quot;1567104207-48aa961f5e7b2821e01735fb6dcdba65.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Social activity visualization (web app)]]></title><description><![CDATA[To finalize the topic about social activity visualizations, I created a web app (in Russian) that does that interactively. The…]]></description><link>https://romaklimenko.github.io/blog/2019/d3/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2019/d3/</guid><pubDate>Fri, 17 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;To finalize the topic about &lt;a href=&quot;/2018/05/07/activity.html&quot;&gt;social activity visualizations&lt;/a&gt;, I created a &lt;a href=&quot;http://romaklimenko.github.io/dirty/&quot;&gt;web app&lt;/a&gt; (in Russian) that does that interactively.&lt;/p&gt;
&lt;p&gt;The visualizations are based on data from &lt;a href=&quot;https://d3.ru&quot;&gt;d3.ru&lt;/a&gt;, an &lt;a href=&quot;https://en.wikipedia.org/wiki/D3.ru&quot;&gt;online platform&lt;/a&gt; based on a rating system that allows users to appraise other individual users as well as content entries and comments posted by them.&lt;/p&gt;
&lt;p&gt;A user can enter any username (or usernames) and see the stats.&lt;/p&gt;
&lt;p&gt;A very active user following the daily routine:
&lt;img src=&quot;wereman.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;br&gt;
This user doesn&apos;t follow the daily routine:
&lt;img src=&quot;onubis.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;br&gt;
A bot:
&lt;img src=&quot;kreiser.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;br&gt;
A person that shifted from one account to another:
&lt;img src=&quot;leha_chifir.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;br&gt;
A person, who wrote from many accounts:
&lt;img src=&quot;bots.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;br&gt;
Also, it&apos;s possible to see the activity by the number of posts and comments of a particular user per day (the red columns are weekends):
&lt;img src=&quot;days.png&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[Flags and people]]></title><description><![CDATA[These visualizations are based on data from d3.ru, an online platform based on a rating system that allows users to appraise other…]]></description><link>https://romaklimenko.github.io/blog/2019/flags/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2019/flags/</guid><pubDate>Sun, 24 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;These visualizations are based on data from &lt;a href=&quot;https://d3.ru&quot;&gt;d3.ru&lt;/a&gt;, an &lt;a href=&quot;https://en.wikipedia.org/wiki/D3.ru&quot;&gt;online platform&lt;/a&gt; based on a rating system that allows users to appraise other individual users as well as content entries and comments posted by them.&lt;/p&gt;
&lt;p&gt;Each post and comment posted on d3.ru has a flag that shows the country where the post or comment author&apos;s IP is located. The most majority of the visitors are located in Russia (ru), but in one post several commenters appeared to be located in Thailand (th).&lt;/p&gt;
&lt;p&gt;It was fairly easy to grab all comments of the Thailanders for all the time and put them all side-by-side on a single timeline:
&lt;img src=&quot;1550996345-01c0f8353420fb38d8c02239a5424070.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This clearly shows us an amazing coincidence - none of the users were in different countries at the same time – Russia, Thailand, Vietnam, and Laos - seven people always traveling together. Or it&apos;s the same person that holds seven accounts? Who knows...&lt;/p&gt;
&lt;p&gt;Yet another application of such visualization techniques is a bit opposite. Two users are suspected to be the same person. The reason is that they are usually commenting on the same topics and often one continues another&apos;s discussion like someone forgets to change the account by mistake. In this case, the visualization shows that these accounts never wrote a comment from the same country (excluding Russia, because both are living in Russia now). That&apos;s unlikely that a person forgets to relogin, never forgets to use the right VPN for different accounts:
&lt;img src=&quot;1550996912-f7408e492c49fe8b23d0f4d77331a198.png&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Moses Ilyich Schönfinkel]]></title><description><![CDATA[Rereading a chapter on currying in the book named Lambda-Calculus and Combinators, I came across a paragraph that I highlighted earlier…]]></description><link>https://romaklimenko.github.io/blog/2019/schonfinkel/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2019/schonfinkel/</guid><pubDate>Sat, 23 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;img src=&quot;Moses-Schonfinkel.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Rereading a chapter on currying in the book named &lt;a href=&quot;https://www.amazon.com/dp/B001EHEC20/ref=cm_sw_r_tw_dp_U_x_aFP.CbK5YWHJ0&quot;&gt;Lambda-Calculus and Combinators&lt;/a&gt;, I came across a paragraph that I highlighted earlier:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(currying) Named after Haskell Curry, one of the inventors of combinatory logic. Curry always insisted that he got the idea of using h from M. Schönfinkel’s, but most workers seem to prefer to pronounce ‘&lt;strong&gt;currying&lt;/strong&gt;’ rather than ‘&lt;strong&gt;schönfinkeling&lt;/strong&gt;’&quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moses Ilyich Schönfinkel was born in 1889 in Ekaterinoslav (also my hometown, renamed in 1926 to Dnepropetrovsk and renamed in 2016 to &lt;a href=&quot;https://en.wikipedia.org/wiki/Dnipro&quot;&gt;Dnipro&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Schönfinkel developed a formal system that avoided the use of bound variables. His system was essentially equivalent to a combinatory logic based upon the combinators &lt;strong&gt;B&lt;/strong&gt;, &lt;strong&gt;C&lt;/strong&gt;, &lt;strong&gt;I&lt;/strong&gt;, &lt;strong&gt;K&lt;/strong&gt;, and &lt;strong&gt;S&lt;/strong&gt;. Schönfinkel was able to show that the system could be reduced to just &lt;strong&gt;K&lt;/strong&gt; and &lt;strong&gt;S&lt;/strong&gt; and outlined a proof that a version of this system had the same power as predicate logic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Schönfinkel attended the Novorossiysk University of Odessa, studying mathematics under Samuil Osipovich Shatunovskii, who worked in geometry and the foundations of mathematics. From 1914 to 1924, Schönfinkel was a member of David Hilbert&apos;s group at the University of Göttingen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;After he left Göttingen, Schönfinkel returned to Moscow. By 1927 he was reported to be mentally ill and in a sanatorium. &lt;strong&gt;His later life was spent in poverty, and he died in Moscow some time in 1942. His papers were burned by his neighbors for heating&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unfortunately, there is very little information on the Schönfinkel&apos;s biography on the Internet. A quick fact checking shows that the phrase about Schönfinkel&apos;s papers burned by his neighbors is linked to a &lt;a href=&quot;https://www.cambridge.org/core/journals/journal-of-symbolic-logic/article/s-a-anovskaa-osnovania-matematiki-i-matematiceskaa-logika-foundations-of-mathematics-and-mathematical-logic-matematika-v-sssr-za-tridcat-let-19171947-mathematics-in-the-ussr-for-the-thirty-years-19171947-ogiz-moscow-and-leningrad1948-pp-950/1354C8597C3BEAAE82836127B2953AA1&quot;&gt;review&lt;/a&gt; Yanovskaya&apos;s article. I have read the review carefully and found only this (&lt;em&gt;see the last sentence&lt;/em&gt;):&lt;/p&gt;
&lt;img src=&quot;1550946356-ce7f5e8dd50cd32f9ac728d0698d288d.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The author gives the biographical information that Shönfinkel became mentally ill and died in Moscow in 1942.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&apos;s look into the original article (&lt;em&gt;in Russian&lt;/em&gt;):&lt;/p&gt;
&lt;img src=&quot;1550946822-2d16ee4b76b2ab374e335b9ce1d5ea26.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;blockquote&gt;
&lt;p&gt;Этот блестящий ученик Шатуновского, к сожалению, рано выбыл из строя. (Заболев душевно, Шейнфинкель умер в Москве в 1942 г.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In English:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This brilliant student of Shatunovsky, unfortunately, early out of action. (Mentally ill, Scheinfinkel died in Moscow in 1942).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is all about Schönfinkel&apos;s last years in the article.&lt;/p&gt;
&lt;p&gt;Another source that I found is a bit odd. Howard Gregory in his book &lt;a href=&quot;https://www.amazon.de/dp/0748691634/ref=cm_sw_r_tw_dp_U_x_TqR.CbKCTVPJN&quot;&gt;Language and Logics&lt;/a&gt; speculates on Stalin&apos;s influence on Schönfinkel:&lt;/p&gt;
&lt;img src=&quot;stalin.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;It sounds very prejudiced and politized (especially, taking into account that was no Ukraine when a &quot;Ukrainian Jew&quot; Schönfinkel was born and lived in Ekaterinoslav, Russian Empire).&lt;/p&gt;
&lt;p&gt;• • •&lt;/p&gt;
&lt;p&gt;I would appreciate if someone who knows the more details of this story about the papers burned by neighbors, will help me to find the proofs of it.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Monty Hall problem simply explained]]></title><description><![CDATA[Probably, you already heard about the Monty Hall problem: Suppose you're on a game show, and you're given the choice of three doors: Behind…]]></description><link>https://romaklimenko.github.io/blog/2018/monty-hall/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2018/monty-hall/</guid><pubDate>Sat, 08 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Probably, you already heard about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Monty_Hall_problem&quot;&gt;Monty Hall problem&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Suppose you&apos;re on a game show, and you&apos;re given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what&apos;s behind the doors, opens another door, say No. 3, which has a goat. He then says to you, &quot;Do you want to pick door No. 2?&quot; Is it to your advantage to switch your choice?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The probability of winning the car after switching the choice is 2/3. This is counterintuitive for most people.&lt;/p&gt;
&lt;p&gt;There are plenty of explanations on the Internet, but I find most of them overcomplicated. It&apos;s easy to find the right answer by writing down every step what happens in both scenarios:&lt;/p&gt;
&lt;p&gt;The not-switching scenario is simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select one of three doors.&lt;/li&gt;
&lt;li&gt;Win with a probability of 1/3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now let&apos;s see the always-switch-the-choice scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select one of three doors.&lt;/li&gt;
&lt;li&gt;Monty opens one of the doors with a goat.&lt;/li&gt;
&lt;li&gt;Switch the choice to another door.&lt;/li&gt;
&lt;li&gt;Win with the probability of 2/3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the last scenario, the first step is redundant because &lt;em&gt;we always open another door&lt;/em&gt;. Let&apos;s reduce it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Monty opens a door with a goat.&lt;/li&gt;
&lt;li&gt;You open one of two remaining doors (therefore you together with Monthy just opened two of three doors).&lt;/li&gt;
&lt;li&gt;Win with the probability of 2/3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Indeed, in the second scenario, you cooperate with Monty: you and he together open two doors.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[People paint my photos!]]></title><description><![CDATA[I was pleasantly surprised (again!) when @gibbonaharper (Gibbona Harper) from Nürnberg painted my Instagram photo: Thank you, Gibbona! Well…]]></description><link>https://romaklimenko.github.io/blog/2018/painting/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2018/painting/</guid><pubDate>Sat, 27 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I was pleasantly surprised (&lt;a href=&quot;/2016/10/03/drawing.html&quot;&gt;again!&lt;/a&gt;) when &lt;a href=&quot;https://www.instagram.com/gibbonaharper/&quot;&gt;@gibbonaharper&lt;/a&gt; (Gibbona Harper) from Nürnberg &lt;a href=&quot;https://www.instagram.com/p/BpcNXEaHnv4/&quot;&gt;painted&lt;/a&gt; my Instagram photo:&lt;/p&gt;
&lt;img src=&quot;kranes-paint-1.jpeg&quot; class=&quot;img-fluid&quot; /&gt;
&lt;img src=&quot;kranes-paint-2.jpeg&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Thank you, Gibbona! Well done!&lt;/p&gt;
&lt;p&gt;Here&apos;s my &lt;a href=&quot;https://www.instagram.com/p/BgPOfLyl1Cn/&quot;&gt;original photo&lt;/a&gt;:&lt;/p&gt;
&lt;img src=&quot;kranes.jpeg&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[How many words I learned in a year]]></title><description><![CDATA[Many Danish adults have a vocabulary about 50.000–70.000 Danish words.
A first-grader child knows about 5.000–10.000 Danish words. – sproget…]]></description><link>https://romaklimenko.github.io/blog/2018/how-many-words/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2018/how-many-words/</guid><pubDate>Sun, 09 Sep 2018 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;Many Danish adults have a vocabulary about 50.000–70.000 Danish words.
A first-grader child knows about 5.000–10.000 Danish words.&lt;/p&gt;
&lt;p&gt;– &lt;a href=&quot;https://sproget.dk/temaer/ord-og-bogstaver/antallet-af-ord-i-dansk&quot;&gt;sproget.dk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A year ago, September 9th, 2017, I have started a daily activity, which I did every single day since that date. Every day, without any holidays or pauses, I learned new Danish words.&lt;/p&gt;
&lt;p&gt;To do so, I wrote a single app that randomly shows me a Danish word, I need to call to memory what does the word mean:&lt;/p&gt;
&lt;img src=&quot;derudenfor.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;And then I open a description and check if I correctly remember the meaning of the word:&lt;/p&gt;
&lt;img src=&quot;derudenfor-2.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;If I was right, the word is postponed to be repeated in several days. The more times I guess the meaning, the longer interval to the next repetition. I use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot;&gt;Fibonacci numbers&lt;/a&gt; to figure out the next date.&lt;/p&gt;
&lt;p&gt;If I forgot the meaning, I reset the number of successful repetitions and the word shall be repeated later today.&lt;/p&gt;
&lt;p&gt;This technique is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Spaced_repetition&quot;&gt;spaced repetition&lt;/a&gt;. The most popular algorithm in this area is &lt;a href=&quot;https://www.supermemo.com/english/ol/sm2.htm&quot;&gt;SM2&lt;/a&gt; from early &lt;a href=&quot;https://en.wikipedia.org/wiki/SuperMemo&quot;&gt;SuperMemo&lt;/a&gt;. The SM2 implementation looks very similar to the Fibonacci numbers, so for my purposes, I just held to the latest option.&lt;/p&gt;
&lt;p&gt;I also limited the number of the repetitions to 10, so the word after 10th successful repetition is considered as learned and never appears again. With Fibonacci numbers, a word gets its 10th repetition on the 143rd day after the first one:&lt;/p&gt;
&lt;img src=&quot;excel.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;And so here I am:&lt;/p&gt;
&lt;p&gt;A dictionary that I use contains 94.137 Danish words.&lt;/p&gt;
&lt;p&gt;In a year, I have seen 3.881 words and learned 2.556 of them.&lt;/p&gt;
&lt;p&gt;Here is how my learning went. The top edge of the red area is seen words and the bottom edge is the learned ones:&lt;/p&gt;
&lt;img src=&quot;progress.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Here is how the amount of the “working set” (seen — learned) has changed over time:&lt;/p&gt;
&lt;img src=&quot;working-set.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;This is how the numbers of repetitions are distributed over all the words in my database:&lt;/p&gt;
&lt;img src=&quot;repetitions.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;And here is how many words are scheduled for each day now. The greener, the lesser is the average number of successful repetitions on each word on that day:&lt;/p&gt;
&lt;img src=&quot;forecast.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;On the next step, I plan to take words popularity into account, so the popular words would appear with higher probability.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Central limit theorem]]></title><description><![CDATA[In probability theory, the central limit theorem (CLT) establishes that, in some situations, when independent random variables are added…]]></description><link>https://romaklimenko.github.io/blog/2018/clt/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2018/clt/</guid><pubDate>Thu, 14 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;In probability theory, the central limit theorem (CLT) establishes that, in some situations, when independent random variables are added, their properly normalized sum tends toward a normal distribution (informally a “bell curve”) even if the original variables themselves are not normally distributed. The theorem is a key concept in probability theory because it implies that probabilistic and statistical methods that work for normal distributions can be applicable to many problems involving other types of distributions.&lt;/p&gt;
&lt;p&gt;– &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_limit_theorem&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To grokk this, let’s generate a sample of 1.000.000 random numbers from 0 to 100 and draw a chart where the x-axis represents a random number and the y-axis — the number of times the number occurs in our sample:&lt;/p&gt;
&lt;img src=&quot;clt-0.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Looks like more or less equally distributed.&lt;/p&gt;
&lt;p&gt;Now let’s generate another sample by using the same &lt;code class=&quot;language-text&quot;&gt;random()&lt;/code&gt; function, but to generate each number, we will add one random result to another: &lt;code class=&quot;language-text&quot;&gt;random() + random()&lt;/code&gt;:&lt;/p&gt;
&lt;img src=&quot;clt-1.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;This seems like an angle, let’s add more random numbers together: &lt;code class=&quot;language-text&quot;&gt;random() + random() + random()&lt;/code&gt;:&lt;/p&gt;
&lt;img src=&quot;clt-2.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Let’s sum up five random numbers together:&lt;/p&gt;
&lt;img src=&quot;clt-3.png&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[Dominant colors with k-means clustering]]></title><description><![CDATA[Here is a quick and dirty implementation of the k-means clustering used to find a palette of dominant colours for an image. The code is…]]></description><link>https://romaklimenko.github.io/blog/2018/k-means/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2018/k-means/</guid><pubDate>Fri, 25 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Here is a quick and dirty implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/K-means_clustering&quot;&gt;k-means clustering&lt;/a&gt; used to find a palette of dominant colours for an image.&lt;/p&gt;
&lt;p&gt;The code is hosted on the &lt;a href=&quot;https://beta.observablehq.com/d/78d894babaef4084&quot;&gt;Observable&lt;/a&gt; notebook.&lt;/p&gt;
&lt;h2&gt;Let’s take a picture&lt;/h2&gt;
&lt;p&gt;For example, let’s take this nice colourful photo taken by &lt;a href=&quot;https://unsplash.com/@dylu&quot;&gt;Jacek Dylag&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/&quot;&gt;Unsplash&lt;/a&gt;:&lt;/p&gt;
&lt;img src=&quot;image.jpeg&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;To save the performance (remember, we run this code in the browser), let’s take a sample of 1000 random pixels of the image:&lt;/p&gt;
&lt;img src=&quot;sample.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;It’s nearly impossible to guess the original image from these dots, but because they are randomly taken, we can use them as a sample data.&lt;/p&gt;
&lt;p&gt;The photo’s size is 600*399, which gives us 239400 pixels. Each pixel has 3 dimensions: red, green and blue (&lt;a href=&quot;https://en.wikipedia.org/wiki/RGB_color_model&quot;&gt;RGB&lt;/a&gt;) and can be represented as a vector:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;pixel = [R,G,B]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s visualise the sample dots by drawing 2D projections of the 3D RGB color space:&lt;/p&gt;
&lt;img src=&quot;rgb.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;h2&gt;K is for cluster&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;k-means clustering is a method of vector quantisation, originally from signal processing, that is popular for cluster analysis in data mining. k-means clustering aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster. &lt;a href=&quot;https://en.wikipedia.org/wiki/K-means_clustering&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The classical k-means algorithm consists of the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take random k points (called centroids) from a space formed by our data points (i.e. vectors).&lt;/li&gt;
&lt;li&gt;Assign every data point to the closest centroid. Each centroid with assigned data point we call a cluster.&lt;/li&gt;
&lt;li&gt;For each cluster, find a new centroid by calculating a center between all the data points in the cluster.&lt;/li&gt;
&lt;li&gt;Repeat steps 2. and 3. while the coordinates of centroids change.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Simple as a pie, isn’t it? Well, yes, but there are some nuances.&lt;/p&gt;
&lt;h2&gt;Performance&lt;/h2&gt;
&lt;p&gt;Say, &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; is a number of clusters (as well as centroids) and &lt;code class=&quot;language-text&quot;&gt;n&lt;/code&gt; is a number of data points, &lt;code class=&quot;language-text&quot;&gt;d&lt;/code&gt; is a number of dimensions (vector length) and &lt;code class=&quot;language-text&quot;&gt;i&lt;/code&gt; is a number of iterations (how many times 2. and 3. have to run). Roughly speaking, the complexity of this will be:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;O(k * n * d * i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be pretty slow, and here are some simple ways to speed it up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the final centroids on the sample data and then run the last iteration on the full set. Usually, this significantly reduces the number of iterations on the full set.&lt;/li&gt;
&lt;li&gt;Set the top limit for the iterations number, so the method will not freeze forever.&lt;/li&gt;
&lt;li&gt;Set the minimal distance when centroids are considered to be the same. On my code, this saved 3–5 iterations when the distance is less than one but still slightly greater than zero.&lt;/li&gt;
&lt;li&gt;If you use Euclidean distance, don’t calculate the root, the squared distance is ok.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Distance and scale&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Squared &lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_distance&quot;&gt;Euclidean distance&lt;/a&gt; is the simplest one, however, it may not be good to calculate the &lt;a href=&quot;https://en.wikipedia.org/wiki/Color_difference&quot;&gt;color difference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;RGB color space is very simple, but again, if you really need to calculate the color difference precisely, use Lab and CIEDE2000.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The optimal number of k&lt;/h2&gt;
&lt;p&gt;To find an optimal &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt;, I find the average variance for each cluster on the sample data. Simply put, a cluster’s variance is an average distance between its centroid and each point of the cluster. Therefore, the average variance of for a given &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; is the average variance of all its clusters. If we draw a chart where the variance is on the y-axis and &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; is the x-axis, we will see that the variance drops down, but at some point, the slope is decreasing significantly and after this value of k we can observe even some increasing of the variance:&lt;/p&gt;
&lt;img src=&quot;variance.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Now put this all together:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take a sample data set.&lt;/li&gt;
&lt;li&gt;Find centroids for different k on the sample data set.&lt;/li&gt;
&lt;li&gt;Find from which k the variance slows down its decrease.&lt;/li&gt;
&lt;li&gt;Run the k-means clustering with given initial centroids on the full data set.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Voilà:&lt;/p&gt;
&lt;img src=&quot;rgb2.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;The big circles represent centroids. The bigger a circle, the more data points are assigned to this centroid.&lt;/p&gt;
&lt;p&gt;And the posterised image:&lt;/p&gt;
&lt;img src=&quot;result.png&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[Marathon]]></title><description><![CDATA[On May 13, 2018, more than seven thousands of runners ran the Copenhagen Marathon. When I ran it in 2015, I was very impressed in pacemakers…]]></description><link>https://romaklimenko.github.io/blog/2018/maraphon/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2018/maraphon/</guid><pubDate>Mon, 21 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On May 13, 2018, more than seven thousands of runners ran the &lt;a href=&quot;https://copenhagenmarathon.dk/&quot;&gt;Copenhagen Marathon&lt;/a&gt;. When I ran it in 2015, I was very impressed in &lt;a href=&quot;https://en.wikipedia.org/wiki/Pacemaker_%28running&quot;&gt;pacemakers&lt;/a&gt;), the guys who were running with specific paces and other runners who wanted to be at the finish in a specific time, just followed them:&lt;/p&gt;
&lt;img src=&quot;pacemakers.jpeg&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;(image source: &lt;a href=&quot;http://balti.run/en/become-a-pacemaker-for-balti-half-marathon/&quot;&gt;http://balti.run/en/become-a-pacemaker-for-balti-half-marathon/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I was wondered what will be on a chart if I will plot all the marathon runners paces over the distance. Here it is:&lt;/p&gt;
&lt;img src=&quot;paces.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;We can visually see how many runners follow their pacemakers or aiming to complete the race in a ‘round’ time.&lt;/p&gt;
&lt;p&gt;Many of the pacemakers (men) were dressed in skirts and wigs with pigtails like these:&lt;/p&gt;
&lt;img src=&quot;inst.jpeg&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;(source: &lt;a href=&quot;https://www.instagram.com/p/BjAnLtXHeZi/&quot;&gt;https://www.instagram.com/p/BjAnLtXHeZi/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;On their backs, they have inscriptions like: “if you see this, you are running like a girl”. I wanted to check that idea, so all men are blue and women are pink on the next chart:&lt;/p&gt;
&lt;img src=&quot;paces-color.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Indeed, women tend to run slower, despite there are very fast women and very slow men. Fairly speaking, I was also pretty slow and finished the Marathon in 4:30, 6:25 min/km, which is a bit slower than &lt;a href=&quot;http://naturalrunningcenter.com/2012/10/15/m-n/&quot;&gt;Oprah’s time&lt;/a&gt;.
To get more understanding about how big is the difference, I plot a chart where the x-axis is the average pace and the y-axis is the number of men (blue) an women (pink) finished with that average pace. Because there are less women than men who ran the marathon, the amounts of women is multiplied proportionaly:&lt;/p&gt;
&lt;img src=&quot;sex.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Here we can visually see that despite more men finish with faster paces and more women finish with slower paces, men and women have more in common than differences and most people finish with the same pace regardless of sex.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Social activity visualization]]></title><description><![CDATA[Let’s explore a user’s activity on an internet forum. We have the API to fetch the user’s activity like posts and comments. For every…]]></description><link>https://romaklimenko.github.io/blog/2018/activity/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2018/activity/</guid><pubDate>Mon, 07 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Let’s explore a user’s activity on an internet forum. We have the API to fetch the user’s activity like posts and comments. For every activity, we can see the date and time when it was created. We can also see the rating — a number that shows how other users rated a given post or comment.&lt;/p&gt;
&lt;p&gt;Now, let’s draw a chart that shows the date on the x-axis and the time on the y-axis. Let’s draw the user’s activities on the chart. Every point will be a post or comment. A big green point means an activity with a positive rating, a smaller gray point means an activity with zero-rating and a big red point is an activity with negative rating:&lt;/p&gt;
&lt;img src=&quot;romaklimenko.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;From this chart we can see some interesting patterns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user wrote his first comments in 2014 but was not very active.&lt;/li&gt;
&lt;li&gt;For some reason, he started to post something at the end of 2014 and beginning of 2015.&lt;/li&gt;
&lt;li&gt;From the beginning of 2016, the user started to post and comment more.&lt;/li&gt;
&lt;li&gt;The red lines show us where the user had some &lt;em&gt;hot&lt;/em&gt; discussions with others.&lt;/li&gt;
&lt;li&gt;We can see when the user is usually going to sleep and on which day he stayed late.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The thing about the sleep patterns and the user’s presence on the forum looks interesting. Let’s draw a chart, with the same axes, but draw a line if it is possible to detect the user’s absence on the forum during the day. Of course, we can do that only when the user posts something for several days in a row: say, the user posted on Monday, Tuesday, Wednesday, and Friday. We can guess when the user slept on Tuesday because there are activities on Monday and Wednesday. But if there is a comment, say, at 23:00 on Wednesday and then 7:00 on Friday, we can’t see if the user went to bed on Wednesday 23:30 or Thursday 11:45.&lt;/p&gt;
&lt;p&gt;Anyway, let’s draw a chart. The grey lines are for inactivities that are longer than 8 hours, orange — more than 6 hours and less than 8, red — less than 6.&lt;/p&gt;
&lt;p&gt;As we can see, there are only two times when the user didn’t sleep long enough:&lt;/p&gt;
&lt;img src=&quot;romaklimenko-sleep.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;h2&gt;Comparing two users&lt;/h2&gt;
&lt;p&gt;Some people create two or more accounts. We will not discuss the reasons for this but will try to visually compare to user activities and see if they belong to a single person. We draw the activities of two users on a single chart. Each activity is represented by a short vertical line, red for the first user and blue for the second. If a person posts from two accounts almost in the same time, this may look like . The lines will overlay each other and we will easily notice the common patterns in social activities of these two users:&lt;/p&gt;
&lt;img src=&quot;iamalive-dean.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;The common patterns are clear here. Here is another comparison, a person has created another user account but keeps posting from the first one from time to time:&lt;/p&gt;
&lt;img src=&quot;bitl-unlaba.png&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[How to prepare for a marathon]]></title><description><![CDATA[Here is a short visualization about how to prepare for a marathon. I have recorded all my runs and visualized them on a map: In total, I had…]]></description><link>https://romaklimenko.github.io/blog/2017/how-to-prepare-for-marathon/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2017/how-to-prepare-for-marathon/</guid><pubDate>Sun, 29 Oct 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Here is a short visualization about how to prepare for a &lt;a href=&quot;official&quot;&gt;marathon&lt;/a&gt;. I have recorded all my runs and visualized them on a map:&lt;/p&gt;
&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem&quot; &gt; &lt;iframe src=&quot;https://www.youtube.com/embed/kv6IM8TxeDk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot;&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;p&gt;In total, I had to run 64 times in 16 weeks continuously increasing the number of kilometers per week. I had a schedule, but not always followed it. Here&apos;s the actual chart that compares the schedule to my actual training activities:&lt;/p&gt;
&lt;img src=&quot;schedule.png&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[Danish and naïve machine learning]]></title><description><![CDATA[Everyone who learned Danish knows that there are two grammatical genders in the language: common (or n-words) and neuter (or t-words…]]></description><link>https://romaklimenko.github.io/blog/2017/danish-ml/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2017/danish-ml/</guid><pubDate>Sun, 30 Apr 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Everyone who learned Danish knows that there are two grammatical genders in the language: common (or n-words) and neuter (or t-words).&lt;/p&gt;
&lt;p&gt;According to &lt;a href=&quot;https://en.wikipedia.org/wiki/Gender_in_Danish_and_Swedish&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Historically, nouns in Danish and Swedish, like other Germanic languages, had one of three grammatical genders: masculine, feminine, or neuter. Over time the feminine and masculine genders merged into a common gender.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most of the Danish nouns are n-words and there are no rules about how to distinguish between n- and t-words. Teachers usually recommend just to remember.&lt;/p&gt;
&lt;p&gt;On the other hand, people usually say about a new word they hear that it &lt;em&gt;sounds like&lt;/em&gt; n- or t-word.&lt;/p&gt;
&lt;p&gt;If one says that a word sounds like a t-word, could it be that our intuition is able to build up some rules to solve this question? I was always interested to find an answer to that question.&lt;/p&gt;
&lt;p&gt;The simplest thing I could do is to ask a computer to classify the Danish nouns and find the rules to distinguish between n- and -t.&lt;/p&gt;
&lt;p&gt;I took an XML-file with Danish a big set of Danish words from the &lt;a href=&quot;https://dumps.wikimedia.org/dawiktionary/latest/&quot;&gt;Wiktionary dumps&lt;/a&gt; (thanks to Steve for pointing me there) and applied an R-script to process and classify the data.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;library&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xml2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
xml &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; read_xml&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./data/dawiktionary-latest-pages-meta-current.xml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
nouns &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  xml_text&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xml_find_all&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xml&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;//d1:page//d1:title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; xml_ns&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xml&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  xml_text&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xml_find_all&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xml&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;//d1:page//d1:text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; xml_ns&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xml&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
colnames&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nouns&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives us a data frame with 48008 rows, let’s remove everything but nouns from the data frame:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;nouns &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; nouns&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;grepl&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nouns&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
nouns &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; nouns&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;grepl&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\\{\\{-noun-\\|da\\}\\}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nouns&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
nrow&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nouns&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 8004&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have 8004 nouns, let’s add a column et, it should contain boolean values: &lt;em&gt;et&lt;/em&gt; for t-words and &lt;em&gt;en&lt;/em&gt; for n-words:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;nouns&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;et &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nouns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ifelse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    grepl&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;paste&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;et\\|&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sep &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ignore.case &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;et&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
nouns&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;et &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; factor&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nouns&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;et&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
nouns&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;text &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;NULL&lt;/span&gt;
nrow&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nouns&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;nouns&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;et &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;et&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 1552&lt;/span&gt;
nrow&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nouns&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;nouns&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;et &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;et&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 6452&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next step, add more columns with attributes in order to let computer classify the words by these attributes. Let’s start with word’s length and build a decision tree based on this attribute:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;library&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;party&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
nouns&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;letters_count &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nouns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; nchar&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
tree &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; ctree&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;et &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt; letters_count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nouns&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
plot&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;img src=&quot;tree0.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;As we can see from the plot, there are slightly less than 20% of t-words between the words, which length is more than 8 symbols and there are slightly more than 20% of the words, which length is less or equal than 8 symbols. So far this doesn’t look like an effective set of rules as the part of t-words in our data frame is about 19%. But let’s write a function which will apply our set of nouns to the decision tree and will count how many times the decision tree will give us a right answer about is it a n- or t-word:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;test_tree &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nouns&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  prediction &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nouns&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;et&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; predict&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nouns&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  colnames&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prediction&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fact&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;prediction&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  prediction&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;valid &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prediction&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ifelse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  nrow&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prediction&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prediction&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;valid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
test_tree&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nouns&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 6452&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are 6452 right answers which coincide with a number of n-words in the &lt;code class=&quot;language-text&quot;&gt;nouns&lt;/code&gt; data frame. Therefore, our decision tree is not so effective.
What if noun’s gender correlates with first of last letters the word? Let’s add more attributes to check this. There are 29 letters in the Danish alphabet, so there will be at least 29 boolean attributes for every first letter, at least 29 for every last letter. By the same principle, let’s add attributes for first two and last two letters of every word (&lt;code class=&quot;language-text&quot;&gt;29 * 29 = 841&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Dansk ABC&lt;/span&gt;
abc &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;G&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;H&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;J&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;K&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;N&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;P&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Q&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;R&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;S&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;T&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;U&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;V&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;W&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;X&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Z&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Æ&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Ø&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Å&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
columns &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;letters_count&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letter1 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; abc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  letter &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; letter1
  column_name &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; paste&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;first_letter_is_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sep&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  column &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nouns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ifelse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;toupper&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;substring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;column&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;column&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    nouns&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;column_name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; column
    columns &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;columns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; column_name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letter2 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; abc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      letter &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; paste&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letter1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sep&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      column_name &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; paste&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;first_letter_is_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sep&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      column &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        nouns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ifelse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          toupper&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;substring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;column&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;column&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        nouns&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;column_name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; column
        columns &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;columns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; column_name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letter1 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; abc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  letter &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; letter1
  column_name &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; paste&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;last_letter_is_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sep&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  column &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    nouns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ifelse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      toupper&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;substring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nchar&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nchar&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; letter1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;column&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;column&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    nouns&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;column_name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; column
    columns &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;columns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; column_name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letter2 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; abc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      letter &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; paste&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letter2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sep&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      column_name &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; paste&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;last_letters_are_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sep&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      column &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        nouns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ifelse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          toupper&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;substring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nchar&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nchar&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;column&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;column&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        nouns&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;column_name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; column
        columns &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;columns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; column_name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
tree &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; ctree&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;as.formula&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;paste&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;et ~ &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; paste&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;columns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; collapse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nouns&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
plot&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
test_tree&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nouns&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 6595&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;img src=&quot;tree1.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;This tree gives us 6595 right answers, which is only 143 answers more, but still not enough to rely on it.
For the other hand, we can see that there are some signs that we can use and maybe our brain uses when we feel that some word sounds like n- or t-.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Out of 133 words ending by &lt;em&gt;“um”&lt;/em&gt;, there are 109 t-words (82%). For example: &lt;em&gt;et amfibium, et faktotum, et punktum, but en rosarium&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Out of 1650 words ending by &lt;em&gt;“e”&lt;/em&gt;, there are only 110 t-words (7%). For example: &lt;em&gt;en næse, en pige, but et æble&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conclusion: unfortunately, it’s easier to remember all these words. Even if there are some rules that let us guess the right grammatical gender, they are more complex than just a set of first and last letters.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Structured (English) Query Language]]></title><description><![CDATA[This is just a small observation about one counterintuitive feature of the SQL language.
SQL (Structured Query Language) was initially named…]]></description><link>https://romaklimenko.github.io/blog/2016/sql/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2016/sql/</guid><pubDate>Wed, 14 Dec 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is just a small observation about one counterintuitive feature of the SQL language.
SQL (Structured Query Language) was initially named &lt;a href=&quot;https://en.wikipedia.org/wiki/SQL#History&quot;&gt;SEQUEL&lt;/a&gt; (Structured &lt;em&gt;English&lt;/em&gt; Query Language). One word clearly explains why the “keyed-in” SQL statements order is different than the logical query processing order.&lt;/p&gt;
&lt;p&gt;Say, we’d like to ask someone for a bottle of beer from a fridge. The first thing we think about is &lt;em&gt;what&lt;/em&gt; do we want (a beer) and only then &lt;em&gt;how&lt;/em&gt; to get it (from the fridge).&lt;/p&gt;
&lt;p&gt;In English, we’d say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Give me a bottle of beer from the fridge, please.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, &lt;em&gt;what&lt;/em&gt; do we want, second, &lt;em&gt;how&lt;/em&gt; to get it.&lt;/p&gt;
&lt;p&gt;But if we wrote a program, we want to make an algorithm: first — &lt;em&gt;how&lt;/em&gt;, second — &lt;em&gt;what&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Open the fridge, take a bottle of beer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The so-called “&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms189499.aspx#Anchor_2&quot;&gt;keyed-in order&lt;/a&gt;” of a standard SQL query is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;FROM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;WHERE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;GROUP BY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HAVING&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ORDER BY&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But the logical query processing order is different:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;FROM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;WHERE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;GROUP BY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HAVING&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ORDER BY&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is why we can’t, for example, refer in the &lt;code class=&quot;language-text&quot;&gt;WHERE&lt;/code&gt; clause to a column alias defined in the &lt;code class=&quot;language-text&quot;&gt;SELECT&lt;/code&gt; clause. This isn&apos;t allowed because the &lt;code class=&quot;language-text&quot;&gt;WHERE&lt;/code&gt; clause is evaluated before the &lt;code class=&quot;language-text&quot;&gt;SELECT&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;Now take a classic SQL query:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; Country&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;YEAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HireDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; YearHired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; NumEmployees
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; Employees
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; HireDate &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;19920101&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; Country&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;YEAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HireDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;HAVING&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; Country&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; YearHired &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And compare to it’s LINQ-expression equivalent:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; e &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; Employees
              &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HireDate &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1992&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;group&lt;/span&gt; e &lt;span class=&quot;token keyword&quot;&gt;by&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Country &lt;span class=&quot;token keyword&quot;&gt;into&lt;/span&gt; g
              &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;orderby&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Key &lt;span class=&quot;token keyword&quot;&gt;descending&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;select&lt;/code&gt; at the last line looks more natural, isn&apos;t it?&lt;/p&gt;
&lt;p&gt;Of course, &lt;code class=&quot;language-text&quot;&gt;orderby&lt;/code&gt; goes before the &lt;code class=&quot;language-text&quot;&gt;select&lt;/code&gt;, but this is exactly how it is processed in the LINQ code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; result2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Employees
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HireDate &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1992&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GroupBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Country&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OrderByDescending&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Running Sitecore in Docker]]></title><description><![CDATA[Warning: this post is obsolete. Please read this one instead: http://blog.martinmiles.net/post/starting-with-docker-and-sitecore Motivation…]]></description><link>https://romaklimenko.github.io/blog/2016/sitecore-in-docker/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2016/sitecore-in-docker/</guid><pubDate>Sat, 29 Oct 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;Warning: this post is obsolete. Please read this one instead: &lt;a href=&quot;http://blog.martinmiles.net/post/starting-with-docker-and-sitecore&quot;&gt;http://blog.martinmiles.net/post/starting-with-docker-and-sitecore&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;img src=&quot;docker.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker containers wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries — anything that can be installed on a server. This guarantees that the software will always run the same, regardless of its environment.&lt;/p&gt;
&lt;p&gt;— &lt;a href=&quot;https://www.docker.com/what-docker&quot;&gt;https://www.docker.com/what-docker&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was looking forward to Docker support of Windows containers for a long time. Docker &lt;a href=&quot;https://www.docker.com/microsoft&quot;&gt;supports&lt;/a&gt; Windows containers nowadays and it means we are able to put our Windows applications in containers in order to save a lot of time spent on setting up development, testing, and deployment.&lt;/p&gt;
&lt;p&gt;These days Microsoft gives a lot of &lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt; examples so setting up a container for ASP.NET web application is not a pain but a pleasure.&lt;/p&gt;
&lt;p&gt;In this article, I am going to show how to perform a very basic setup for &lt;a href=&quot;https://www.sitecore.net/en/products/sitecore-experience-platform&quot;&gt;Sitecore Experience Platform 8.2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To set it up, I mixed the following &lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt;s:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/microsoft/windowsservercore/&quot;&gt;microsoft/windowsservercore&lt;/a&gt; — Windows Server 2016 Server Core base OS image for Windows containers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-2016-express-windows/&quot;&gt;microsoft/mssql-server-2016-express-windows&lt;/a&gt; — Microsoft SQL Server 2016 Express.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/microsoft/iis/&quot;&gt;microsoft/iis&lt;/a&gt; — Internet Information Services (IIS).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;There are many options how to install Sitecore Experience Platform. For the very basic demo setup, we will need the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.sitecore.net/Downloads/Sitecore_Experience_Platform/82/Sitecore_Experience_Platform_82_Initial_Release.aspx#&quot;&gt;ZIP archive&lt;/a&gt; of the Sitecore site root folder.&lt;/li&gt;
&lt;li&gt;A Sitecore license (I hope you have got one).&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server installer. You can get it from &lt;a href=&quot;https://go.microsoft.com/fwlink/?linkid=829176&quot;&gt;here&lt;/a&gt; (Microsoft SQL Express 2016).&lt;/li&gt;
&lt;li&gt;You’ll need to run Windows 10 or Windows Server 2016 on your PC or laptop.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have all these, we can go further.&lt;/p&gt;
&lt;h2&gt;Docker setup&lt;/h2&gt;
&lt;p&gt;Follow &lt;a href=&quot;https://msdn.microsoft.com/virtualization/windowscontainers/quick_start/quick_start_windows_10&quot;&gt;this&lt;/a&gt; article to setup Docker on Windows. If you already have Docker installed, please, verify the version of dockerd service. I have spent some time trying to figure out that the version of the dockerd service on my machine is not the same as I just installed. Quick check – you should be able to pull Windows containers like that:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker pull microsoft/windowsservercore&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And here are the first step to start building a Sitecore container:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a folder for our container (i.e. &lt;code class=&quot;language-text&quot;&gt;C:\docker&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Create a &lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt; in the folder we just created.&lt;/li&gt;
&lt;li&gt;Start our &lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt; by specifying the Base Image for our container:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;dockerfile&quot;&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; microsoft/windowsservercore&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Files&lt;/h2&gt;
&lt;p&gt;I put Sitecore files just in the same way as for local quick setup. The structure is like that:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;docker
sitecore
Databases
&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;
Website
&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;
Data
license.xml
&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I will not dive deep into Sitecore configuration. You just need to place files as you usually do when you setup your Sitecore instances. Remember about &lt;code class=&quot;language-text&quot;&gt;ConnectionStrings.config&lt;/code&gt; and a path to &lt;code class=&quot;language-text&quot;&gt;license.xml&lt;/code&gt;. Don&apos;t attach the databases.&lt;/p&gt;
&lt;p&gt;Add to our &lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt; the following lines to make the files available in the container:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;dockerfile&quot;&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; . /
&lt;span class=&quot;token keyword&quot;&gt;WORKDIR&lt;/span&gt; /&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Microsoft SQL&lt;/h2&gt;
&lt;p&gt;Now we need to set up Microsoft SQL Server. Add to the &lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt; a following line:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;RUN SQLEXPR_x64_ENU.exe /qs /x:setup &amp;amp;&amp;amp; /setup/setup.exe /q /ACTION=Install /INSTANCENAME=SQLEXPRESS /FEATURES=SQLEngine /UPDATEENABLED=0 /SQLSVCACCOUNT=&amp;quot;NT AUTHORITY\System&amp;quot; /SQLSYSADMINACCOUNTS=&amp;quot;BUILTIN\ADMINISTRATORS&amp;quot; /TCPENABLED=1 /NPENABLED=0 /IACCEPTSQLSERVERLICENSETERMS &amp;amp;&amp;amp; del /F /Q SQLEXPR_x64_ENU.exe &amp;amp;&amp;amp; rd /q /s setup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember, &lt;a href=&quot;https://go.microsoft.com/fwlink/?linkid=829176&quot;&gt;SQLEXPR&lt;em&gt;x64&lt;/em&gt;ENU.exe&lt;/a&gt; must be at the root of our folder, like: &lt;code class=&quot;language-text&quot;&gt;C:\docker\SQLEXPR_x64_ENU.exe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, I run a PowerShell script to enable &lt;code class=&quot;language-text&quot;&gt;sa&lt;/code&gt; account, change the password and attach databases. Add the following line to our Dockerfile:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;dockerfile&quot;&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; powershell ./sql.ps1 &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;Verbose&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is &lt;code class=&quot;language-text&quot;&gt;sql.ps1&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# See also:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#   - https://github.com/Microsoft/sql-server-samples/tree/master/samples/manage/windows-containers/mssql-server-2016-express-windows&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;Set-StrictMode&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Version latest &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;Stop-Service&lt;/span&gt; MSSQL`&lt;span class=&quot;token variable&quot;&gt;$SQLEXPRESS&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;Set-ItemProperty&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&apos;HKLM:\software\microsoft\microsoft sql server\mssql13.SQLEXPRESS\mssqlserver\supersocketnetlib\tcp\ipall&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name tcpdynamicports &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Set-ItemProperty&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&apos;HKLM:\software\microsoft\microsoft sql server\mssql13.SQLEXPRESS\mssqlserver\supersocketnetlib\tcp\ipall&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name tcpport &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value 1433 &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Set-ItemProperty&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&apos;HKLM:\software\microsoft\microsoft sql server\mssql13.SQLEXPRESS\mssqlserver&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name LoginMode &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value 2 &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;Start-Service&lt;/span&gt; MSSQL`&lt;span class=&quot;token variable&quot;&gt;$SQLEXPRESS&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;Invoke-Sqlcmd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Query &lt;span class=&quot;token string&quot;&gt;&quot;ALTER LOGIN sa with password=&apos;Str0ng_En0ugh&apos;; ALTER LOGIN sa ENABLE;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ServerInstance &lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;Invoke-Sqlcmd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Query &lt;span class=&quot;token string&quot;&gt;&quot;CREATE DATABASE Sitecore_Analytics ON (FILENAME = &apos;C:\sitecore\Databases\Sitecore.Analytics.mdf&apos;), (FILENAME = &apos;C:\sitecore\Databases\Sitecore.Analytics.ldf&apos;) FOR ATTACH ;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ServerInstance &lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Invoke-Sqlcmd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Query &lt;span class=&quot;token string&quot;&gt;&quot;CREATE DATABASE Sitecore_Core      ON (FILENAME = &apos;C:\sitecore\Databases\Sitecore.Core.mdf&apos;),      (FILENAME = &apos;C:\sitecore\Databases\Sitecore.Core.ldf&apos;)      FOR ATTACH ;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ServerInstance &lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Invoke-Sqlcmd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Query &lt;span class=&quot;token string&quot;&gt;&quot;CREATE DATABASE Sitecore_Master    ON (FILENAME = &apos;C:\sitecore\Databases\Sitecore.Master.mdf&apos;),    (FILENAME = &apos;C:\sitecore\Databases\Sitecore.Master.ldf&apos;)    FOR ATTACH ;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ServerInstance &lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Invoke-Sqlcmd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Query &lt;span class=&quot;token string&quot;&gt;&quot;CREATE DATABASE Sitecore_Web       ON (FILENAME = &apos;C:\sitecore\Databases\Sitecore.Web.mdf&apos;),       (FILENAME = &apos;C:\sitecore\\Databases\Sitecore.Web.ldf&apos;)      FOR ATTACH ;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ServerInstance &lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;IIS&lt;/h2&gt;
&lt;p&gt;In the same way as for Microsoft SQL Server, setup IIS:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;dockerfile&quot;&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; powershell ./iis.ps1 &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;Verbose&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is &lt;code class=&quot;language-text&quot;&gt;iis.ps1&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# See also:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#   - https://github.com/microsoft/iis-docker/blob/master/windowsservercore/Dockerfile&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#   - https://github.com/microsoft/aspnet-docker/blob/master/4.6.2/Dockerfile&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;Add-WindowsFeature&lt;/span&gt; Web&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Server
&lt;span class=&quot;token function&quot;&gt;Add-WindowsFeature&lt;/span&gt; NET&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Framework&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;45&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ASPNET
&lt;span class=&quot;token function&quot;&gt;Add-WindowsFeature&lt;/span&gt; Web&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Asp&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Net45

C:\Windows\System32\inetsrv\appcmd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exe delete site &lt;span class=&quot;token string&quot;&gt;&quot;default web site&quot;&lt;/span&gt;

C:\Windows\System32\inetsrv\appcmd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exe add site &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;name:Sitecore &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bindings:http/&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;:80: &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;physicalPath:c:\sitecore\Website

C:\Windows\System32\inetsrv\appcmd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exe &lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt; site Sitecore

iisreset&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Build&lt;/h2&gt;
&lt;p&gt;Now we have all we need to build an image. Here’s our final &lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;dockerfile&quot;&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; microsoft/windowsservercore

&lt;span class=&quot;token keyword&quot;&gt;LABEL&lt;/span&gt; Description=&lt;span class=&quot;token string&quot;&gt;&quot;Sitecore 8.2 rev. 160729&quot;&lt;/span&gt; Vendor=&lt;span class=&quot;token string&quot;&gt;&quot;Sitecore&quot;&lt;/span&gt; Version=&lt;span class=&quot;token string&quot;&gt;&quot;8.2 rev. 160729&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Adding the files&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; . /
&lt;span class=&quot;token keyword&quot;&gt;WORKDIR&lt;/span&gt; /

&lt;span class=&quot;token comment&quot;&gt;# Installing MS SQL Server&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; SQLEXPR_x64_ENU.exe /qs /x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;setup &amp;amp;&amp;amp; /setup/setup.exe /q /ACTION=Install /INSTANCENAME=SQLEXPRESS /FEATURES=SQLEngine /UPDATEENABLED=0 /SQLSVCACCOUNT=&lt;span class=&quot;token string&quot;&gt;&quot;NT AUTHORITY\System&quot;&lt;/span&gt; /SQLSYSADMINACCOUNTS=&lt;span class=&quot;token string&quot;&gt;&quot;BUILTIN\ADMINISTRATORS&quot;&lt;/span&gt; /TCPENABLED=1 /NPENABLED=0 /IACCEPTSQLSERVERLICENSETERMS &amp;amp;&amp;amp; del /F /Q SQLEXPR_x64_ENU.exe &amp;amp;&amp;amp; rd /q /s setup

&lt;span class=&quot;token comment&quot;&gt;# Setting up MS SQL Server and attaching databases&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; powershell ./sql.ps1 &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;Verbose

&lt;span class=&quot;token comment&quot;&gt;# Setting up IIS and adding the website&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; powershell ./iis.ps1 &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;Verbose

&lt;span class=&quot;token keyword&quot;&gt;EXPOSE&lt;/span&gt; 80&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To build an image, let’s create a &lt;code class=&quot;language-text&quot;&gt;build.bat&lt;/code&gt; file in our folder (&lt;code class=&quot;language-text&quot;&gt;C:\docker&lt;/code&gt;) with following content:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;docker build -t sitecore %~dp0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run this file and wait for the build to complete. Then, if we run docker images we shall see the sitecoreimage. Now let&apos;s use it!&lt;/p&gt;
&lt;h2&gt;Create a container and run it&lt;/h2&gt;
&lt;p&gt;To create containers from our image run a command like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;docker run --name sitecore -p &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;:80 -it sitecore powershell&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will log you into powershell console on your Docker container. Run ping sitecore to find an IP-address of our Sitecore instance:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;Pinging &lt;span class=&quot;token number&quot;&gt;172.26&lt;/span&gt;.102.196 with &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt; bytes of data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add to &lt;code class=&quot;language-text&quot;&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt; file a following line:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;172.26.102.196 sitecore&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open &lt;a href=&quot;http://sitecore/&quot;&gt;http://sitecore/&lt;/a&gt; in a browser, it should look like this:&lt;/p&gt;
&lt;img src=&quot;sitecore.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;This is it! In the same way, we can setup Mongo and Solr.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A first look at category theory]]></title><description><![CDATA[Motivation While many of functional programming concepts are derived from category theory, we often hear that it’s not necessary to learn it…]]></description><link>https://romaklimenko.github.io/blog/2016/a-first-look-at-category-theory/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2016/a-first-look-at-category-theory/</guid><pubDate>Fri, 21 Oct 2016 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;While many of functional programming concepts are derived from &lt;a href=&quot;https://en.wikipedia.org/wiki/Category_theory&quot;&gt;category theory&lt;/a&gt;, we often hear that it’s not necessary to learn it if we want to understand its concepts. This is, of course, is not true.&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;But here&apos;s an article with a partially opposite opinion: &lt;a href=&quot;https://jozefg.bitbucket.io/posts/2013-10-14-please-dont-learn-cat-theory.html&quot;&gt;https://jozefg.bitbucket.io/posts/2013-10-14-please-dont-learn-cat-theory.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; is not a language of our choice, we are forced to map Haskell patterns to our language while these patterns are mapped to Haskell from category theory. A lot of important information is lost in translation.&lt;/p&gt;
&lt;p&gt;This is why we start not from programming but from the theory itself. We will see that the theory is not only about programming but we will get back to some code samples at the end of the article.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When we formalize our ideas, our understanding is almost always clarified.&lt;br&gt;
– David I. Spivak in Category Theory for Scientists&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In fact, category theory is not so hard to grasp like we may think about. Some even think they can teach &lt;a href=&quot;https://arxiv.org/pdf/quant-ph/0510032.pdf&quot;&gt;Quantum Mechanics in kindergarten&lt;/a&gt; with it. The theory is intended to make things simpler, by using the right “language” and formalism.&lt;/p&gt;
&lt;p&gt;Things are getting more complicated if we map the theory implementation to the theory instead of mapping the theory to things we implement.&lt;/p&gt;
&lt;p&gt;The purpose of this article is to write down very basic concepts of category Theory and &lt;em&gt;only then&lt;/em&gt; get back to examples in the programming world.&lt;/p&gt;
&lt;h2&gt;Category Theory 101&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Category Theory formalizes mathematical structure and its concepts in terms of a collection of objects and of arrows (also called morphisms).&lt;br&gt;
– Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Category theory is an area of mathematics that studies the properties of relationships between mathematical objects, &lt;em&gt;which do not depend on the internal structure&lt;/em&gt; of these objects.&lt;/p&gt;
&lt;h2&gt;Objects and Morphisms&lt;/h2&gt;
&lt;p&gt;Let’s take an &lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;B&lt;/code&gt;. These are two objects, mathematical structures, types — whatever. No matter how do we call it because we don’t care about theirs internal structure.&lt;/p&gt;
&lt;p&gt;Now let’s draw a line between &lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;B&lt;/code&gt; and name it &lt;code class=&quot;language-text&quot;&gt;f&lt;/code&gt;:&lt;/p&gt;
&lt;img src=&quot;morphism.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;This line is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Morphism&quot;&gt;morphism&lt;/a&gt;. While morphism &lt;a href=&quot;http://mathoverflow.net/questions/119913/what-is-the-difference-between-a-function-and-a-morphism&quot;&gt;isn’t necessary a function&lt;/a&gt;, in category theory, it usually means a function.&lt;/p&gt;
&lt;p&gt;If we think about the morphism as about a function from A to B, we can also think about A and B as about types or sets:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;none&quot;&gt;&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;f : A → B&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Composition&lt;/h2&gt;
&lt;p&gt;Now take another object, let’s call it &lt;code class=&quot;language-text&quot;&gt;C&lt;/code&gt; and let’s draw a &lt;code class=&quot;language-text&quot;&gt;g : B → C&lt;/code&gt;:&lt;/p&gt;
&lt;img src=&quot;abc.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;We can easily see that if we follow the arrows &lt;code class=&quot;language-text&quot;&gt;f&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;g&lt;/code&gt; we can get from &lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;C&lt;/code&gt; via &lt;code class=&quot;language-text&quot;&gt;B&lt;/code&gt;, because the end of &lt;code class=&quot;language-text&quot;&gt;f&lt;/code&gt; is the same as the beginning of &lt;code class=&quot;language-text&quot;&gt;g&lt;/code&gt;. Beginning of every morphism is called a &lt;em&gt;domain&lt;/em&gt; (&lt;code class=&quot;language-text&quot;&gt;dom&lt;/code&gt;) and ending is a &lt;em&gt;codomain&lt;/em&gt; (&lt;code class=&quot;language-text&quot;&gt;cod&lt;/code&gt;). So we can say that:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;A = dom(f), B = cod(f)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and for &lt;code class=&quot;language-text&quot;&gt;f : A → B&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;g : B → C&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;cod(f) = dom(g)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Joining two morphisms that match with their domain and codomain is called &lt;em&gt;composition&lt;/em&gt; and denoted as:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;g ∘ f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which produces a new morphism (function). So that:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;∀ a ∈ A, (g ∘ f)(a) = g(f(a))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which means: for every &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt;, a composition of &lt;code class=&quot;language-text&quot;&gt;g&lt;/code&gt; after &lt;code class=&quot;language-text&quot;&gt;f&lt;/code&gt; applied to &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt; is the same as the result of &lt;code class=&quot;language-text&quot;&gt;g(f(a))&lt;/code&gt;.&lt;/p&gt;
&lt;img src=&quot;composition.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;In this way, we can connect as many objects as we need. For example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;h : C → D&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;img src=&quot;composition2.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;h2&gt;Associativity&lt;/h2&gt;
&lt;p&gt;Operator &lt;code class=&quot;language-text&quot;&gt;∘&lt;/code&gt; is &lt;a href=&quot;https://en.wikipedia.org/wiki/Operator_associativity&quot;&gt;associative&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(h ∘ g) ∘ f = h ∘ (g ∘ f)
∵ ∀ a ∈ A, ((h ∘ g) ∘ f)(a) = h(g(f(a)))=(h ∘ (g ∘ f))(a)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Identity&lt;/h2&gt;
&lt;p&gt;Every object we introduced has an &lt;a href=&quot;https://ncatlab.org/nlab/show/identity+morphism&quot;&gt;Identity&lt;/a&gt; morphism:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1A : A → A
∀ a ∈ A, 1A(a) = a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Identities are composable as usuall morphisms:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;f ∘ 1A = f = 1B ∘ f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Category&lt;/h2&gt;
&lt;p&gt;Now we have everything to define a &lt;a href=&quot;https://en.wikipedia.org/wiki/Category_%28mathematics%29&quot;&gt;category&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A category consists of following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects: &lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;B&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;C&lt;/code&gt;, …&lt;/li&gt;
&lt;li&gt;Morphisms: &lt;code class=&quot;language-text&quot;&gt;f&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;g&lt;/code&gt;, …&lt;/li&gt;
&lt;li&gt;Identities for every object: &lt;code class=&quot;language-text&quot;&gt;1A&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;1B&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;1C&lt;/code&gt;, …&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following laws must be satisfied:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Associativity:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(∀ f : A → B, g : B → C, h : C → D), h ∘ (g ∘ f) = (h ∘ g) ∘ f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which means: for all the functions that are composable with each other composition is associative.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unit:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;(∀ f : A → B), f ∘ 1A = f = 1B ∘ f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which means: every function &lt;code class=&quot;language-text&quot;&gt;f : A → B&lt;/code&gt; is equal to &lt;code class=&quot;language-text&quot;&gt;f ∘ 1A&lt;/code&gt; and is equal to &lt;code class=&quot;language-text&quot;&gt;1B ∘ f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So generally speaking, &lt;em&gt;a category is a set of objects connected with arrows and limited by associativity and unit laws&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Of course, there is a lot more interesting in category theory, but these basics are enough to start thinking about more complex concepts. All these monoids, functors, monads etc. are just about connecting objects with arrows and this is &lt;em&gt;not&lt;/em&gt; only about programming.&lt;/p&gt;
&lt;h2&gt;Get into the code&lt;/h2&gt;
&lt;p&gt;It’s natural to map these concepts to any of modern programming languages.&lt;/p&gt;
&lt;h3&gt;Haskell&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Integral&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;True&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;False&quot;&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;composed&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Integral&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;composed&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;f&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;composed&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- True&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;composed&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;JavaScript:&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;g&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;True&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; composed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;composed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;composed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;C#:&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Xunit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Category&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CategoryExtensions&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Func&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; C&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Compose&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; B&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; C&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Func&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;B&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; C&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Func&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; B&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CategoryTest&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Func&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token class-name&quot;&gt;Func&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; g &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; b &lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;True&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Theory&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;InlineData&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;InlineData&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Composition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// Act&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;Func&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; composed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Compose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;
            Assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;composed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;F#:&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// val f : (int -&gt; bool)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; f a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// val g : (bool -&gt; string)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; b &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;True&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;False&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// val composed : (int -&gt; string)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; composed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; g &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; f

&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; composed &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// val e : string = &quot;True&quot;&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; composed &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// val y : string = &quot;False&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[People draw my photos!]]></title><description><![CDATA[I was pleasantly surprised when @sacret19 (Anastasia A.) sketched my Instagram photo: Well done, Anastasia! Here's my original photo:]]></description><link>https://romaklimenko.github.io/blog/2016/drawing/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2016/drawing/</guid><pubDate>Mon, 03 Oct 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I was pleasantly surprised when &lt;a href=&quot;https://www.instagram.com/sacret19/&quot;&gt;@sacret19&lt;/a&gt; (Anastasia A.) &lt;a href=&quot;https://www.instagram.com/p/BLFrFfhhdbp/&quot;&gt;sketched&lt;/a&gt; my Instagram photo:&lt;/p&gt;
&lt;img src=&quot;barracks-drawing.jpeg&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Well done, Anastasia!&lt;/p&gt;
&lt;p&gt;Here&apos;s my &lt;a href=&quot;https://www.instagram.com/p/BK-IUhXgI0Y/&quot;&gt;original photo&lt;/a&gt;:&lt;/p&gt;
&lt;img src=&quot;barracks.jpeg&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[How I lost 10 kilograms in 3 months]]></title><description><![CDATA[TL; DR This is my personal experience of losing weight. I was 82 kg in June 2016, now I am 72 kg. Disclaimer: I’m neither a doctor nor a…]]></description><link>https://romaklimenko.github.io/blog/2016/how-i-lost-10-kg/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2016/how-i-lost-10-kg/</guid><pubDate>Sun, 11 Sep 2016 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;TL; DR&lt;/h2&gt;
&lt;p&gt;This is my personal experience of losing weight. I was 82 kg in June 2016, now I am 72 kg.&lt;/p&gt;
&lt;p&gt;Disclaimer: I’m neither a doctor nor a self-studied smartass who knows a lot about dietology and human physiology. If something worked for me, it doesn’t mean it will work for you.&lt;/p&gt;
&lt;img src=&quot;weight-chart.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;h2&gt;Decision&lt;/h2&gt;
&lt;p&gt;I&apos;m a male, 35 years, 179 cm. A few months ago I drank one or two 0.33L beers several times in a week. My breakfast was usually a bread with a thick layer of Nutella and a 0.5L Coca-Cola. For the other hand, I used to jog from time to time and I still ride my bike about 20 km every working day.&lt;/p&gt;
&lt;p&gt;I thought that my active life will save me from obesity, but one day I realized that my belly is visible even if I suck my stomach in.&lt;/p&gt;
&lt;p&gt;The last drop was when all my M-sized t-shirts became too small so I had to wear L-size.
In June 2016, I bought scales and measured my weight. It was 82 kg (25.6 BMI), which means overweight.&lt;/p&gt;
&lt;img src=&quot;bmi.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;In next three months, I managed to drop 10 kilos with help of &lt;a href=&quot;https://en.wikipedia.org/wiki/Ketogenic_diet&quot;&gt;Ketogenic diet&lt;/a&gt;. I will explain what is it below, but first, a few words about the other things that did or did not help me in my endeavor.&lt;/p&gt;
&lt;h2&gt;These things don’t work&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Add more gym and cardio&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Works up to some limit:&lt;/p&gt;
&lt;p&gt;Even when I was preparing for the marathon and ran up to 60 kilometers per week (maximum 32 km at once), I was not so lean as I am now. Cardio is helpful, but without diet, it is an incomplete solution.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Count calories and burn more than you eat&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hard to follow:&lt;/p&gt;
&lt;p&gt;It sounds like a simple arithmetics: burn more calories than you eat. In real life, it means: “know what do you eat and how much”. This is very imprecise approach unless you carefully measure all your meals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Track your motion activities&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Motivates for a week or two:&lt;/p&gt;
&lt;p&gt;I tried to use &lt;a href=&quot;https://jawbone.com/up&quot;&gt;Jawbone UP&lt;/a&gt; several times in my life. After a month it tells nothing new — same home and work activities, workdays and weekends trends. It kept asking me to walk 10 thousand steps even if I cycled 40 kilometers in the same day. This thing is definitely like a new to-do list — gives you an illusion of control, but does not close your tasks for you.&lt;/p&gt;
&lt;p&gt;Moreover, Jawbone UP is still bad in Apple Health integration and battery lifetime is less than promised.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Eat at least six times in a day&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hard to follow:&lt;/p&gt;
&lt;p&gt;The best I managed to do in that direction is to not skip breakfast.&lt;/p&gt;
&lt;h2&gt;These things work:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Now or never&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“Now or never”. This phrase helped me many times in my life. I just said to myself that &lt;strong&gt;if I will not do it now, I will never do it&lt;/strong&gt;. I’m not getting younger or healthier every year. If this is hard to do right now, it will be impossible to do later on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keeping things simple&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Complex solutions are hard to follow. If possible, try to avoid complex solutions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lifesum app works just fine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/app/id286906691?mt=8&quot;&gt;Lifesum&lt;/a&gt; app one of the simple solutions that work for me. I write down every meal I eat but instead of counting calories, I pay more attention to what exactly I eat: is it reach of carbohydrates, protein or fat?&lt;/p&gt;
&lt;h2&gt;Ketogenic diet&lt;/h2&gt;
&lt;p&gt;The ketogenic diet is very easy to follow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eat no more than 20 g carbohydrates per day (moderate option — 50 g)&lt;/li&gt;
&lt;li&gt;Eat enough protein&lt;/li&gt;
&lt;li&gt;Eat a lot of fat&lt;/li&gt;
&lt;li&gt;Drink water&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is it! Just by following these rules I lost 3 kilograms every month 3 months in a row.&lt;/p&gt;
&lt;p&gt;The trick is that our body likes to burn sugar, so we are addicted to sugar and we feel bad when we don’t have it. When our body gets sugar, insulin burns glucose produces fat and our body demands more sugar again. Without carbohydrates and if there is enough amount of protein and fat, our body gives up to demand sugar and starts to burn our own fat. When our body converts our fat to &lt;a href=&quot;https://en.wikipedia.org/wiki/Ketone_bodies&quot;&gt;ketone bodies&lt;/a&gt; — these guys can deliver energy instead of glucose.&lt;/p&gt;
&lt;p&gt;There is still our brain who can’t use ketone bodies and needs glucose, but our body can produce enough glucose from protein, so when all other systems operate on ketone bodies, it’s enough glucose for the brain.&lt;/p&gt;
&lt;h2&gt;How it goes&lt;/h2&gt;
&lt;p&gt;I tried this diet for a month and my goal was to drop two kilograms: from 82 to 80. I’ve reached the goal in two weeks!&lt;/p&gt;
&lt;p&gt;Then I adjusted the goal to 77 kg (-5 kg) and I was 77 kg in a month.&lt;/p&gt;
&lt;p&gt;Now, after 3 months, I’m 72 kg (-10 kg) and don’t feel any need to stop the diet because it’s not hard to follow.&lt;/p&gt;
&lt;img src=&quot;bmi2.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;The important thing to notice is that I losing only fat, not muscles. My chin-ups and push-ups are even better than before the diet.&lt;/p&gt;
&lt;p&gt;Cardio gets harder without carbohydrates, but jogging gives me more pleasure now: I definitely feel the difference of my own bodyweight now and three months back.&lt;/p&gt;
&lt;p&gt;Apart cardio, my fatigability did not increase and my performance didn’t drop.&lt;/p&gt;
&lt;h2&gt;Hints&lt;/h2&gt;
&lt;p&gt;The common question I hear: “is it hard to not to eat sugar”? It’s not hard at all if you eat enough fat.&lt;/p&gt;
&lt;p&gt;We are addicted to sugar while we eat it. If we don’t eat it, our body stops sending us requests to get more sweet things.&lt;/p&gt;
&lt;p&gt;I ate a piece of candy once during the diet. I didn’t want it before, but once I ate it, I started to feel a hunger and a great desire to eat more sweets. This is like alcohol or drug addiction.&lt;/p&gt;
&lt;p&gt;A simple thing I do if I want more sugar: I eat more fat. The same I do when I’m hungry. More fat FTW!&lt;/p&gt;
&lt;p&gt;Drinking water is also important: I usually drink at least 2 liters per day.&lt;/p&gt;
&lt;p&gt;This is it. I hope this text will be useful for you.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[May the Core be with you]]></title><description><![CDATA[Build Status The Core is a proof of concept of Sitecore cross platform desktop application. It runs on Mac, Windows and Linux: Mac OS X…]]></description><link>https://romaklimenko.github.io/blog/2016/core/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2016/core/</guid><pubDate>Sat, 20 Feb 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/romaklimenko/core&quot;&gt;&lt;img src=&quot;https://travis-ci.org/romaklimenko/core.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/romaklimenko/core/master/img/core.png&quot; height=&quot;128&quot; width=&quot;128&quot; /&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/romaklimenko/core&quot;&gt;Core&lt;/a&gt; is a proof of concept of Sitecore cross platform desktop application. It runs on Mac, Windows and Linux:&lt;/p&gt;
&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem&quot; &gt; &lt;iframe src=&quot;https://player.vimeo.com/video/152064489&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen&quot; allowfullscreen=&quot;&quot; style=&quot; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot;&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href=&quot;https://vimeo.com/152064489&quot;&gt;Core&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/romaklimenko&quot;&gt;Roman Klimenko&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt;
&lt;p&gt;Mac OS X:&lt;/p&gt;
&lt;img src=&quot;screenshot-mac.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;Windows:&lt;/p&gt;
&lt;img src=&quot;screenshot-win.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;h2&gt;Under the hood&lt;/h2&gt;
&lt;p&gt;Here are main technologies on which Core is based on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://electron.atom.io/&quot;&gt;Electron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I didn&apos;t intend to use as many buzzwords as possible. I take simplicity, ease of adding new features and supportability at the first place. This is why there is no TypeScript, JSX and Babel traspilers at the current stage of the project.&lt;/p&gt;
&lt;h2&gt;Setting up Sitecore&lt;/h2&gt;
&lt;p&gt;Connection and configuration management are not implemented. It is expected that Sitecore instance is available at &lt;code class=&quot;language-text&quot;&gt;http://sitecore.api/&lt;/code&gt; and Sitecore Item Web API has setup like this:&lt;/p&gt;
&lt;p&gt;In Sitecore.ItemWebApi.config, enable Sitecore Item Web API and allow anonymous access:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;site&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;website&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;patch:&lt;/span&gt;attribute&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;itemwebapi.mode&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;StandardSecurity&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;patch:&lt;/span&gt;attribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;patch:&lt;/span&gt;attribute&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;itemwebapi.access&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;ReadOnly&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;patch:&lt;/span&gt;attribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;patch:&lt;/span&gt;attribute&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;itemwebapi.allowanonymousaccess&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;true&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;patch:&lt;/span&gt;attribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;site&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Web.config, enable CORS:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;system.webServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;httpProtocol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;customHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;add&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Access-Control-Allow-Origin&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;*&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;add&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Access-Control-Allow-Headers&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Content-Type&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;add&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Access-Control-Allow-Methods&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;GET, POST, PUT, DELETE, OPTIONS&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;customHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;httpProtocol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Build, test and run&lt;/h2&gt;
&lt;p&gt;There are only two global npm dependencies:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i -g gulp
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i -g browserify&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you have gulp and browserify installed globally, install all the development dependencies:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;node_modules/gulp/bin/gulp.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or, if you have &lt;code class=&quot;language-text&quot;&gt;gulp&lt;/code&gt; installed globally:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;gulp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run tests:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run application:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[My tweets]]></title><description><![CDATA[It is my first app in R. Just a visualization of my tweets over time: The language itself seems powerful. I wish I could have more real-life…]]></description><link>https://romaklimenko.github.io/blog/2015/tweets/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2015/tweets/</guid><pubDate>Fri, 17 Apr 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It is my first app in R. Just a visualization of my tweets over time:&lt;/p&gt;
&lt;img src=&quot;tweets2560x1600.png&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;The language itself seems powerful. I wish I could have more real-life tasks to practice with R.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;tweets &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;tweets.csv&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                   head&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                   sep&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                   colClasses&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NULL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NULL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NULL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;NA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NULL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NULL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NULL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; as.Date&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;substr&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;timestamp&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;hours &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; as.integer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;substr&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;timestamp&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;minutes &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; as.integer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;substr&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;timestamp&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;seconds &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; as.integer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;substr&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;timestamp&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;numeric_time &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;hours &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3600&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;minutes &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;seconds

plot&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;date&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     tweets&lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt;numeric_time&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     xlab &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     ylab &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;time of the day&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     yaxt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Skynet, I'll be back!]]></title><description><![CDATA[For the occasion of my departure from the project codename "Skynet", my colleagues prepared such an impressive cake: This cake is a…]]></description><link>https://romaklimenko.github.io/blog/2015/skynet/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2015/skynet/</guid><pubDate>Thu, 05 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;For the occasion of my departure from the project codename &quot;Skynet&quot;, my colleagues prepared such an impressive cake:&lt;/p&gt;
&lt;img src=&quot;hastalavista.jpg&quot; class=&quot;img-fluid&quot; /&gt;
&lt;p&gt;This cake is a traditional Danish cake called &lt;a href=&quot;https://en.wikipedia.org/wiki/Kagemand&quot;&gt;Kagemand&lt;/a&gt; (cake man), traditionally eaten at birthdays and anniversaries.&lt;/p&gt;
&lt;p&gt;Big thanks to my Skynet colleagues! I&apos;ll be back!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sun]]></title><description><![CDATA[When I moved to Denmark, first, I was very impressed by the long days in Summer. But later on, I was in the same way impressed by very long…]]></description><link>https://romaklimenko.github.io/blog/2015/sun/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2015/sun/</guid><pubDate>Wed, 21 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When I moved to Denmark, first, I was very impressed by the long days in Summer. But later on, I was in the same way impressed by very long nights and very short days in Winter.&lt;/p&gt;
&lt;p&gt;In one of these dark winter evenings, I wrote &lt;a href=&quot;https://romaklimenko.github.io/sun/&quot;&gt;a page&lt;/a&gt; to visualize how the day length changes over the year:&lt;/p&gt;
&lt;img src=&quot;sun.png&quot; class=&quot;img-fluid&quot; /&gt;</content:encoded></item><item><title><![CDATA[You only live once]]></title><description><![CDATA[When I was a young boy, I never thought about getting old:
one year seemed to be a very long time, what to say about five years! It was hard…]]></description><link>https://romaklimenko.github.io/blog/2014/yolo/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2014/yolo/</guid><pubDate>Sat, 15 Mar 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When I was a young boy, I never thought about getting old:
one year seemed to be a very long time, what to say about five years!&lt;/p&gt;
&lt;p&gt;It was hard for me to imagine finishing school, finding my first job, getting married, and having kids.&lt;/p&gt;
&lt;p&gt;Suddenly I realized what it&apos;s already happened to me and I&apos;m not that young boy anymore.&lt;/p&gt;
&lt;p&gt;And my daughter is already eight, and I live with my wife for ten years, one-third of my past life.&lt;/p&gt;
&lt;p&gt;After all these thoughts, I came to an idea to visualize events in my life. I drew a long horizontal line - my life. Under this line, I drew shorter lines for each significant period in my life:&lt;/p&gt;
&lt;iframe src=&quot;https://romaklimenko.github.io/yolo/&quot; style=&quot;width:100%;height:600px;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;It&apos;s nice to look at this time after time to save the feeling of where I am, where I could be and where I can be.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Letterpress cheat]]></title><description><![CDATA[Did you play Letterpress game? Try if you didn't. As a coding exercise, once I implemented a simple page to cheat the game:]]></description><link>https://romaklimenko.github.io/blog/2013/cheat/</link><guid isPermaLink="false">https://romaklimenko.github.io/blog/2013/cheat/</guid><pubDate>Sun, 14 Apr 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Did you play &lt;a href=&quot;http://www.letterpressapp.com/&quot;&gt;Letterpress&lt;/a&gt; game? Try if you didn&apos;t.&lt;/p&gt;
&lt;p&gt;As a coding exercise, once I implemented a &lt;a href=&quot;https://romaklimenko.github.io/cheat/&quot;&gt;simple page&lt;/a&gt; to cheat the game:&lt;/p&gt;
&lt;iframe src=&quot;https://romaklimenko.github.io/cheat/&quot; style=&quot;width:100%;height:600px;&quot;&gt;&lt;/iframe&gt;</content:encoded></item></channel></rss>